
// SPDX-License-Identifier: AML
//
// Copyright 2017 Christian Reitwiessner
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.

// 2019 OKIMS

pragma solidity ^0.8.0;

library Pairing {

    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

    struct G1Point {
        uint256 X;
        uint256 Y;
    }

    // Encoding of field elements is: X[0] * z + X[1]
    struct G2Point {
        uint256[2] X;
        uint256[2] Y;
    }

    /*
     * @return The negation of p, i.e. p.plus(p.negate()) should be zero.
     */
    function negate(G1Point memory p) internal pure returns (G1Point memory) {

        // The prime q in the base field F_q for G1
        if (p.X == 0 && p.Y == 0) {
            return G1Point(0, 0);
        } else {
            return G1Point(p.X, PRIME_Q - (p.Y % PRIME_Q));
        }
    }

    /*
     * @return The sum of two points of G1
     */
    function plus(
        G1Point memory p1,
        G1Point memory p2
    ) internal view returns (G1Point memory r) {

        uint256[4] memory input;
        input[0] = p1.X;
        input[1] = p1.Y;
        input[2] = p2.X;
        input[3] = p2.Y;
        bool success;

        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }

        require(success,"pairing-add-failed");
    }


    /*
     * Same as plus but accepts raw input instead of struct
     * @return The sum of two points of G1, one is represented as array
     */
    function plus_raw(uint256[4] memory input, G1Point memory r) internal view {
        bool success;

        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 {invalid()}
        }

        require(success, "pairing-add-failed");
    }

    /*
     * @return The product of a point on G1 and a scalar, i.e.
     *         p == p.scalar_mul(1) and p.plus(p) == p.scalar_mul(2) for all
     *         points p.
     */
    function scalar_mul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {

        uint256[3] memory input;
        input[0] = p.X;
        input[1] = p.Y;
        input[2] = s;
        bool success;
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }
        require (success,"pairing-mul-failed");
    }


    /*
     * Same as scalar_mul but accepts raw input instead of struct,
     * Which avoid extra allocation. provided input can be allocated outside and re-used multiple times
     */
    function scalar_mul_raw(uint256[3] memory input, G1Point memory r) internal view {
        bool success;

        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 {invalid()}
        }
        require(success, "pairing-mul-failed");
    }

    /* @return The result of computing the pairing check
     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1
     *         For example,
     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.
     */
    function pairing(
        G1Point memory a1,
        G2Point memory a2,
        G1Point memory b1,
        G2Point memory b2,
        G1Point memory c1,
        G2Point memory c2,
        G1Point memory d1,
        G2Point memory d2
    ) internal view returns (bool) {

        G1Point[4] memory p1 = [a1, b1, c1, d1];
        G2Point[4] memory p2 = [a2, b2, c2, d2];
        uint256 inputSize = 24;
        uint256[] memory input = new uint256[](inputSize);

        for (uint256 i = 0; i < 4; i++) {
            uint256 j = i * 6;
            input[j + 0] = p1[i].X;
            input[j + 1] = p1[i].Y;
            input[j + 2] = p2[i].X[0];
            input[j + 3] = p2[i].X[1];
            input[j + 4] = p2[i].Y[0];
            input[j + 5] = p2[i].Y[1];
        }

        uint256[1] memory out;
        bool success;

        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }

        require(success,"pairing-opcode-failed");

        return out[0] != 0;
    }
}

contract Verifier {

    using Pairing for *;

    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

    struct VerifyingKey {
        Pairing.G1Point alfa1;
        Pairing.G2Point beta2;
        Pairing.G2Point gamma2;
        Pairing.G2Point delta2;
        // []G1Point IC (K in gnark) appears directly in verifyProof
    }

    struct Proof {
        Pairing.G1Point A;
        Pairing.G2Point B;
        Pairing.G1Point C;
    }

    function verifyingKey() internal pure returns (VerifyingKey memory vk) {
        vk.alfa1 = Pairing.G1Point(uint256(482089868559686199362579514229427002031393892447259195450712416015934504759), uint256(17811733137124982682068915713296437005879346903065069446950300845533269535186));
        vk.beta2 = Pairing.G2Point([uint256(21804476189508964821553219607841620384409405879509361653958393956085151849252), uint256(14695801348600956698268323825096298794193932943895581469546272812394947435235)], [uint256(7770806480119961761126572288699437530343517847007518164667271359822017575790), uint256(2371362583163145251871245618369160547405493642057928650596100899546605296612)]);
        vk.gamma2 = Pairing.G2Point([uint256(12502204898434517700109062020149923904127534844128572252111679583419652993171), uint256(9332753773072454423266617322716755345620403762241939761803628267601539664214)], [uint256(2468129982200410584441623351573539774308604888136003307524740395726650549134), uint256(3975826276541895479513442045568942361762263043004756208974950019058625623311)]);
        vk.delta2 = Pairing.G2Point([uint256(1774422669479093799598428154460890850701487365911843454494002709868997159503), uint256(18924906998966786873617769706620420160738735836190589931687361212879051690213)], [uint256(18412775857148672328778061966743617698787786286748827380141117252983924575573), uint256(16770057834406618800728983179090384354648381477515432163504265849358371635470)]);
    }


    // accumulate scalarMul(mul_input) into q
    // that is computes sets q = (mul_input[0:2] * mul_input[3]) + q
    function accumulate(
        uint256[3] memory mul_input,
        Pairing.G1Point memory p,
        uint256[4] memory buffer,
        Pairing.G1Point memory q
    ) internal view {
        // computes p = mul_input[0:2] * mul_input[3]
        Pairing.scalar_mul_raw(mul_input, p);

        // point addition inputs
        buffer[0] = q.X;
        buffer[1] = q.Y;
        buffer[2] = p.X;
        buffer[3] = p.Y;

        // q = p + q
        Pairing.plus_raw(buffer, q);
    }

    /*
     * @returns Whether the proof is valid given the hardcoded verifying key
     *          above and the public inputs
     */
    function verifyProof(
        uint256[2] memory a,
        uint256[2][2] memory b,
        uint256[2] memory c,
        uint256[713] calldata input
    ) public view returns (bool r) {

        Proof memory proof;
        proof.A = Pairing.G1Point(a[0], a[1]);
        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);
        proof.C = Pairing.G1Point(c[0], c[1]);

        // Make sure that proof.A, B, and C are each less than the prime q
        require(proof.A.X < PRIME_Q, "verifier-aX-gte-prime-q");
        require(proof.A.Y < PRIME_Q, "verifier-aY-gte-prime-q");

        require(proof.B.X[0] < PRIME_Q, "verifier-bX0-gte-prime-q");
        require(proof.B.Y[0] < PRIME_Q, "verifier-bY0-gte-prime-q");

        require(proof.B.X[1] < PRIME_Q, "verifier-bX1-gte-prime-q");
        require(proof.B.Y[1] < PRIME_Q, "verifier-bY1-gte-prime-q");

        require(proof.C.X < PRIME_Q, "verifier-cX-gte-prime-q");
        require(proof.C.Y < PRIME_Q, "verifier-cY-gte-prime-q");

        // Make sure that every input is less than the snark scalar field
        for (uint256 i = 0; i < input.length; i++) {
            require(input[i] < SNARK_SCALAR_FIELD,"verifier-gte-snark-scalar-field");
        }

        VerifyingKey memory vk = verifyingKey();

        // Compute the linear combination vk_x
        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);

        // Buffer reused for addition p1 + p2 to avoid memory allocations
        // [0:2] -> p1.X, p1.Y ; [2:4] -> p2.X, p2.Y
        uint256[4] memory add_input;

        // Buffer reused for multiplication p1 * s
        // [0:2] -> p1.X, p1.Y ; [3] -> s
        uint256[3] memory mul_input;

        // temporary point to avoid extra allocations in accumulate
        Pairing.G1Point memory q = Pairing.G1Point(0, 0);

        vk_x.X = uint256(4107360536744876852939190813177498823238731656264187069630576327461823168839); // vk.K[0].X
        vk_x.Y = uint256(7901506990353266597081801429778748105083033443407452747307122317117763425429); // vk.K[0].Y
        mul_input[0] = uint256(0); // vk.K[1].X
        mul_input[1] = uint256(0); // vk.K[1].Y
        mul_input[2] = input[0];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1] * input[0]
        mul_input[0] = uint256(0); // vk.K[2].X
        mul_input[1] = uint256(0); // vk.K[2].Y
        mul_input[2] = input[1];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[2] * input[1]
        mul_input[0] = uint256(0); // vk.K[3].X
        mul_input[1] = uint256(0); // vk.K[3].Y
        mul_input[2] = input[2];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[3] * input[2]
        mul_input[0] = uint256(0); // vk.K[4].X
        mul_input[1] = uint256(0); // vk.K[4].Y
        mul_input[2] = input[3];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[4] * input[3]
        mul_input[0] = uint256(0); // vk.K[5].X
        mul_input[1] = uint256(0); // vk.K[5].Y
        mul_input[2] = input[4];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[5] * input[4]
        mul_input[0] = uint256(0); // vk.K[6].X
        mul_input[1] = uint256(0); // vk.K[6].Y
        mul_input[2] = input[5];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[6] * input[5]
        mul_input[0] = uint256(11140624995624379199954675412194595120188931423759419658087981637274925140397); // vk.K[7].X
        mul_input[1] = uint256(4334859823209208233072105233713753483626313101876567274299008188138924683199); // vk.K[7].Y
        mul_input[2] = input[6];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[7] * input[6]
        mul_input[0] = uint256(18329398192766848966088590559189977005362300894705965251429877706453527754193); // vk.K[8].X
        mul_input[1] = uint256(10686476767792652590031418114346379200760519481455075003346230059136896818299); // vk.K[8].Y
        mul_input[2] = input[7];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[8] * input[7]
        mul_input[0] = uint256(19183251859533969823556296723184048397068434807346568443201854273640465585537); // vk.K[9].X
        mul_input[1] = uint256(661258260130875952855704920463426004007458435930925888206161374030058781708); // vk.K[9].Y
        mul_input[2] = input[8];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[9] * input[8]
        mul_input[0] = uint256(17998576868384788728684405412257443885050230929377207304510433131933759678816); // vk.K[10].X
        mul_input[1] = uint256(21356047035260313242661701798337677502072068831686940680145453744424452550847); // vk.K[10].Y
        mul_input[2] = input[9];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[10] * input[9]
        mul_input[0] = uint256(2979321185464631567336862292262962563854513800744187727294026467578803815738); // vk.K[11].X
        mul_input[1] = uint256(3113328594342411932269460189026004653213543816672886864831779709725775331322); // vk.K[11].Y
        mul_input[2] = input[10];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[11] * input[10]
        mul_input[0] = uint256(2810860604773212240797415508185675832930547601574649924793055138438271615153); // vk.K[12].X
        mul_input[1] = uint256(4381756313074919694330062249810961520008022343213285104825946187108192270881); // vk.K[12].Y
        mul_input[2] = input[11];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[12] * input[11]
        mul_input[0] = uint256(13160369815816433607640007335527596418741585610185582913642989877154301584971); // vk.K[13].X
        mul_input[1] = uint256(1932208300445389793250328988061982319881666561180323899488235507595384848971); // vk.K[13].Y
        mul_input[2] = input[12];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[13] * input[12]
        mul_input[0] = uint256(15114556938796077338539940608487517028251973064288455207630479096929430050958); // vk.K[14].X
        mul_input[1] = uint256(18722881287457650753783428434735862374667125826449515623022329881782083824604); // vk.K[14].Y
        mul_input[2] = input[13];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[14] * input[13]
        mul_input[0] = uint256(18329716386500560679444156576062236658829822821216717364295671119888679432396); // vk.K[15].X
        mul_input[1] = uint256(1051683607229627176490162381340629474977476111473426165447306726419224566459); // vk.K[15].Y
        mul_input[2] = input[14];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[15] * input[14]
        mul_input[0] = uint256(19839593248995231103937888805308123438051836369824505770110608088774311255897); // vk.K[16].X
        mul_input[1] = uint256(12576794978592247582884161145466614144106932455173255628317917841198260788059); // vk.K[16].Y
        mul_input[2] = input[15];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[16] * input[15]
        mul_input[0] = uint256(12107116835259621397648542418317637558723318389400609998531906481991909833898); // vk.K[17].X
        mul_input[1] = uint256(17515041674445822473870456885530728259789487983792483981365163151931171103560); // vk.K[17].Y
        mul_input[2] = input[16];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[17] * input[16]
        mul_input[0] = uint256(15445125298710688495821387788944895740180881563310250307769004920945532365901); // vk.K[18].X
        mul_input[1] = uint256(6058276635182982283354200389519091575112424903521478245719566889170844309015); // vk.K[18].Y
        mul_input[2] = input[17];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[18] * input[17]
        mul_input[0] = uint256(9879895464449727244005735218770004953414237717901262542260288191201482684180); // vk.K[19].X
        mul_input[1] = uint256(17154464973483872727672811343851166926061767765817670853119990545068374731981); // vk.K[19].Y
        mul_input[2] = input[18];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[19] * input[18]
        mul_input[0] = uint256(16462679450996681593892808765870941339704325019083159210065925172957597800588); // vk.K[20].X
        mul_input[1] = uint256(3636928397442265587235011907594328654361284251010851966567867363710044278306); // vk.K[20].Y
        mul_input[2] = input[19];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[20] * input[19]
        mul_input[0] = uint256(16495025725800234243848638323008249661535016832054044640033229698669644170474); // vk.K[21].X
        mul_input[1] = uint256(2863410576928235055489608372653058171452426853648900208919672342715909871409); // vk.K[21].Y
        mul_input[2] = input[20];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[21] * input[20]
        mul_input[0] = uint256(18956616185742602176641580380738187058188419219120966831176153465104413002177); // vk.K[22].X
        mul_input[1] = uint256(20239050372053041938595638848388000113333257999502632814147441535739559448757); // vk.K[22].Y
        mul_input[2] = input[21];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[22] * input[21]
        mul_input[0] = uint256(8257615868504050205034809321295093547098470517662520290252366669952464125529); // vk.K[23].X
        mul_input[1] = uint256(4789843668380434788847232458998798637620684056534533283426981240072239724151); // vk.K[23].Y
        mul_input[2] = input[22];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[23] * input[22]
        mul_input[0] = uint256(19627559268359303917534812490995110340027695466935837192106274307686293075980); // vk.K[24].X
        mul_input[1] = uint256(6308582879195370188354087205055786651352677675499364227530426572187578676435); // vk.K[24].Y
        mul_input[2] = input[23];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[24] * input[23]
        mul_input[0] = uint256(16041586448266899679737008214857946413753597270704501084420238952088791133175); // vk.K[25].X
        mul_input[1] = uint256(4617967669133330428763204448134111552448170391903675848612246672917925392434); // vk.K[25].Y
        mul_input[2] = input[24];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[25] * input[24]
        mul_input[0] = uint256(9489080605192357410740067706326832676323641168081957525601557842944111261809); // vk.K[26].X
        mul_input[1] = uint256(10852408420795544735027597862738257950086195351038301694565077210037106128890); // vk.K[26].Y
        mul_input[2] = input[25];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[26] * input[25]
        mul_input[0] = uint256(489230228922649712545320548538140363961774346242708799238564437138391498656); // vk.K[27].X
        mul_input[1] = uint256(19588533402579935820399234620393741143424343246064505129252437221285871809558); // vk.K[27].Y
        mul_input[2] = input[26];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[27] * input[26]
        mul_input[0] = uint256(12953350450756194907597471957786590205193965462059847718266330382109750288324); // vk.K[28].X
        mul_input[1] = uint256(12368933225423946482370063320891708104041201022819097329718822381142246924224); // vk.K[28].Y
        mul_input[2] = input[27];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[28] * input[27]
        mul_input[0] = uint256(2281137688298655778022980342121098563516307877365420071412466491376033875089); // vk.K[29].X
        mul_input[1] = uint256(1039578099810156601212726665378724823865643883201734300881815048293510681432); // vk.K[29].Y
        mul_input[2] = input[28];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[29] * input[28]
        mul_input[0] = uint256(3324000630416429292180048091451835731737596485662228516002018606687886761517); // vk.K[30].X
        mul_input[1] = uint256(16563561390938462795283752116342734465825975042403940746993442338686652018861); // vk.K[30].Y
        mul_input[2] = input[29];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[30] * input[29]
        mul_input[0] = uint256(6523086790729220958106367203015552376885115592884375721090915542445441547659); // vk.K[31].X
        mul_input[1] = uint256(1088723081420340683693332940205974421169664176941066955460750653993066001587); // vk.K[31].Y
        mul_input[2] = input[30];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[31] * input[30]
        mul_input[0] = uint256(7577382847418664859389476203686828993630408443328815886222749553014336753084); // vk.K[32].X
        mul_input[1] = uint256(7489084205862296628015462270506203604344610428293887198350777136691088810794); // vk.K[32].Y
        mul_input[2] = input[31];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[32] * input[31]
        mul_input[0] = uint256(12409463326805858347858993381880542182347606803502815291421714703782512968207); // vk.K[33].X
        mul_input[1] = uint256(1718201875014923380089444417180875558470331109756270211481377506589893560573); // vk.K[33].Y
        mul_input[2] = input[32];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[33] * input[32]
        mul_input[0] = uint256(1981816408872046647438848102227795093111197483666642446475807624673980572848); // vk.K[34].X
        mul_input[1] = uint256(5248747506882640184240120789859582586918044953329183432019665487691772538227); // vk.K[34].Y
        mul_input[2] = input[33];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[34] * input[33]
        mul_input[0] = uint256(12941448431643749180877201900250620362074047393877701478502079662633144035177); // vk.K[35].X
        mul_input[1] = uint256(2997989585815536151826237166000933070359256921809098669850902027883697834403); // vk.K[35].Y
        mul_input[2] = input[34];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[35] * input[34]
        mul_input[0] = uint256(10195616235456318019662309158270353412072282455435995236207293988146885557481); // vk.K[36].X
        mul_input[1] = uint256(1480845745719979151899397187075173477715391940406669733397325335077327172040); // vk.K[36].Y
        mul_input[2] = input[35];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[36] * input[35]
        mul_input[0] = uint256(11883565782226693460372923267248580894072827194940792724779881734876823520097); // vk.K[37].X
        mul_input[1] = uint256(11976078145563252438954055411983568873257499810573006782713721558790439488889); // vk.K[37].Y
        mul_input[2] = input[36];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[37] * input[36]
        mul_input[0] = uint256(4210490696895712758021471053355152655560215793130097550644584425927726868200); // vk.K[38].X
        mul_input[1] = uint256(16766812449385892550142472621200102613216540431459435080774757226412708490366); // vk.K[38].Y
        mul_input[2] = input[37];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[38] * input[37]
        mul_input[0] = uint256(16546620802023942675945788510319861592764581521227223540177364604640918130187); // vk.K[39].X
        mul_input[1] = uint256(1894495823225089886178176806880663041782985562177103751243342340165222872586); // vk.K[39].Y
        mul_input[2] = input[38];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[39] * input[38]
        mul_input[0] = uint256(14763124136220790014626696204165604055489380573803618663033292372250782792857); // vk.K[40].X
        mul_input[1] = uint256(15491820078100764971811622041910910700416966621239721051920366231619485738264); // vk.K[40].Y
        mul_input[2] = input[39];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[40] * input[39]
        mul_input[0] = uint256(6539525774432142045009080042231488272619280008145532696789215360790939171817); // vk.K[41].X
        mul_input[1] = uint256(5418972663930627597843756278007190768017706613706780415407970249481541049207); // vk.K[41].Y
        mul_input[2] = input[40];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[41] * input[40]
        mul_input[0] = uint256(4051645339956289060540663432901575463341363167669620884021040850984102743228); // vk.K[42].X
        mul_input[1] = uint256(16617023157590479689947242338960330578765977858692751217201648988236874739569); // vk.K[42].Y
        mul_input[2] = input[41];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[42] * input[41]
        mul_input[0] = uint256(5247215776328896168026131569537001495395671687954223297519579128317993593439); // vk.K[43].X
        mul_input[1] = uint256(20298256926420295926710816213966936792472320524224870555673692724817076144888); // vk.K[43].Y
        mul_input[2] = input[42];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[43] * input[42]
        mul_input[0] = uint256(12975241875419308203606087658675503252073314986788875227600868696700188828432); // vk.K[44].X
        mul_input[1] = uint256(21750932270636701784888048920225562603660943122321398032127431299931956844852); // vk.K[44].Y
        mul_input[2] = input[43];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[44] * input[43]
        mul_input[0] = uint256(9131482758460655972690877627216112234397935259279724070851882710883233889891); // vk.K[45].X
        mul_input[1] = uint256(8960674931524055676782929720816532285489793035872614423037957158704397714294); // vk.K[45].Y
        mul_input[2] = input[44];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[45] * input[44]
        mul_input[0] = uint256(1394046865874051431817743659469522814853090872660062561748371722602838636257); // vk.K[46].X
        mul_input[1] = uint256(4371756992092931905175979287954683221962250448526527275075727208244546103506); // vk.K[46].Y
        mul_input[2] = input[45];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[46] * input[45]
        mul_input[0] = uint256(3812311010932139352521795941970416011226193454228113629250917532578012522364); // vk.K[47].X
        mul_input[1] = uint256(13681233068484191800353355195085784901748750771945620204814858004249524771608); // vk.K[47].Y
        mul_input[2] = input[46];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[47] * input[46]
        mul_input[0] = uint256(7129822547688689453694994777469559526824412453698614637039287225072687172238); // vk.K[48].X
        mul_input[1] = uint256(10756929239035116396809605969625887960120742852434869780791253548600086834743); // vk.K[48].Y
        mul_input[2] = input[47];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[48] * input[47]
        mul_input[0] = uint256(12835961810007848411102910729724612865124654016547398423624205874187224123177); // vk.K[49].X
        mul_input[1] = uint256(15180229057918176566800167889587864113458457962791876728577058505862035521866); // vk.K[49].Y
        mul_input[2] = input[48];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[49] * input[48]
        mul_input[0] = uint256(21512217371051173887113693573213336259995765255603649799422210156146993661930); // vk.K[50].X
        mul_input[1] = uint256(13751271046199316424516077549303112191345736426286002538252652174338309259390); // vk.K[50].Y
        mul_input[2] = input[49];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[50] * input[49]
        mul_input[0] = uint256(16661356549481007151704412633632821610977878237199329513474074314585221016202); // vk.K[51].X
        mul_input[1] = uint256(20281958750829135998872909617539688129464151450629610926270426004028552665777); // vk.K[51].Y
        mul_input[2] = input[50];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[51] * input[50]
        mul_input[0] = uint256(547450029566034437407871590404303783810566862083537197216405714783587124282); // vk.K[52].X
        mul_input[1] = uint256(13164225338510230777294992731512372076098290640427261039642583190993271051231); // vk.K[52].Y
        mul_input[2] = input[51];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[52] * input[51]
        mul_input[0] = uint256(4638828895961775175307440549762439228837766047734465716122043063242219996381); // vk.K[53].X
        mul_input[1] = uint256(1878115336954282055285132087902117822661239668302969499857224409543074366577); // vk.K[53].Y
        mul_input[2] = input[52];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[53] * input[52]
        mul_input[0] = uint256(7727577326423614886749214775862061014549827020088086646990525494886208807840); // vk.K[54].X
        mul_input[1] = uint256(12187423859836890270348317694006941960779332172420233612368839037040458369770); // vk.K[54].Y
        mul_input[2] = input[53];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[54] * input[53]
        mul_input[0] = uint256(3780601219731435308592633221820934634630968519322130579543473968981902967037); // vk.K[55].X
        mul_input[1] = uint256(13253847200105635288042627113285316889167173882411007732619470500669172429463); // vk.K[55].Y
        mul_input[2] = input[54];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[55] * input[54]
        mul_input[0] = uint256(18344318929440410653704130026364292173520960612600136281613297646148580451079); // vk.K[56].X
        mul_input[1] = uint256(20269424614317447436461679289034822682285809724433143296998655282557726686834); // vk.K[56].Y
        mul_input[2] = input[55];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[56] * input[55]
        mul_input[0] = uint256(17478694887926826121787330609968525217834562808943617789958655996896918687512); // vk.K[57].X
        mul_input[1] = uint256(2690509967909854859712313569897200477112682520146217919475478629034262526058); // vk.K[57].Y
        mul_input[2] = input[56];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[57] * input[56]
        mul_input[0] = uint256(16922520871689416117621770164796237287001429368024499503272380551679310606756); // vk.K[58].X
        mul_input[1] = uint256(2049479775400062964104025868404691119037164054790716407331728091599204638157); // vk.K[58].Y
        mul_input[2] = input[57];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[58] * input[57]
        mul_input[0] = uint256(14197243653426068817588922115923735615528490699380893773782725085562331308410); // vk.K[59].X
        mul_input[1] = uint256(15162340858577306816543737114691876752491432723263737954886406232096930802285); // vk.K[59].Y
        mul_input[2] = input[58];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[59] * input[58]
        mul_input[0] = uint256(15358473464581110980892842038481702010141422315915594750195647660753667673336); // vk.K[60].X
        mul_input[1] = uint256(15814210879372493451885828258971853836990128439014783764696582588644117727528); // vk.K[60].Y
        mul_input[2] = input[59];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[60] * input[59]
        mul_input[0] = uint256(706436061948897550251910833250620092863087225873731712524937957858050088159); // vk.K[61].X
        mul_input[1] = uint256(17725505719193762724136256601883188117010058912846923281162327913649217859998); // vk.K[61].Y
        mul_input[2] = input[60];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[61] * input[60]
        mul_input[0] = uint256(1066830296120186876586956016871801422475832247411171339876536616090616977801); // vk.K[62].X
        mul_input[1] = uint256(5721143573149949657618858151679494073808031715111560576471207633063830407373); // vk.K[62].Y
        mul_input[2] = input[61];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[62] * input[61]
        mul_input[0] = uint256(9932073672687699631111896753439344708547856935686190716248759083743747592563); // vk.K[63].X
        mul_input[1] = uint256(20408114896809123043181660452068185863642169129092696073095201208750725396562); // vk.K[63].Y
        mul_input[2] = input[62];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[63] * input[62]
        mul_input[0] = uint256(2196991555453367614961885863524434479146494119779722416499203970506971402783); // vk.K[64].X
        mul_input[1] = uint256(9498592726037870783460028322766421955717540941544916465852636812417029673377); // vk.K[64].Y
        mul_input[2] = input[63];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[64] * input[63]
        mul_input[0] = uint256(18475697124409789689606006595630814282355066801427300316308379239243217927254); // vk.K[65].X
        mul_input[1] = uint256(8006714836171329663336363685808415942389969767165036650482046250273584219313); // vk.K[65].Y
        mul_input[2] = input[64];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[65] * input[64]
        mul_input[0] = uint256(2567964128813518975580032993544185793931721312779769114227418190821976522255); // vk.K[66].X
        mul_input[1] = uint256(5752084317200704363684946424188367270963669518078346022647860176095310247988); // vk.K[66].Y
        mul_input[2] = input[65];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[66] * input[65]
        mul_input[0] = uint256(5126380350178018669351463515767051888909994096622739591319997296178236807268); // vk.K[67].X
        mul_input[1] = uint256(1205277911848309270019517243080531390831067895011098244625338884374964129158); // vk.K[67].Y
        mul_input[2] = input[66];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[67] * input[66]
        mul_input[0] = uint256(10704409656183194204106934727867348421293255110164180802478949993777672896468); // vk.K[68].X
        mul_input[1] = uint256(18158844929395867153395708955856880414581531406386163215044834435735385422459); // vk.K[68].Y
        mul_input[2] = input[67];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[68] * input[67]
        mul_input[0] = uint256(18184064428524306441556467729688070746874721869741162425464740451763292292386); // vk.K[69].X
        mul_input[1] = uint256(14410472577020387705508215064748143529329506581772986724830453272896924632169); // vk.K[69].Y
        mul_input[2] = input[68];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[69] * input[68]
        mul_input[0] = uint256(8957061033601724580747327729259438050908990567561009354858669835931904086234); // vk.K[70].X
        mul_input[1] = uint256(17690909443177788021281544508274268135182941885708514773173272499848718301555); // vk.K[70].Y
        mul_input[2] = input[69];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[70] * input[69]
        mul_input[0] = uint256(19162630493899336947705030317911186628661533048023990129220511822606124930746); // vk.K[71].X
        mul_input[1] = uint256(21508220394739694237024003151961476274537421693976771969100560646428367683202); // vk.K[71].Y
        mul_input[2] = input[70];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[71] * input[70]
        mul_input[0] = uint256(7365347991367666102142703262295661644270636942621399438523869524255083570151); // vk.K[72].X
        mul_input[1] = uint256(3441742470220209421912913977559333456855063632319740304131648487556349178691); // vk.K[72].Y
        mul_input[2] = input[71];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[72] * input[71]
        mul_input[0] = uint256(19002861069627109603574143952132020746586634498395963294647383942301776510718); // vk.K[73].X
        mul_input[1] = uint256(7018305736434946831499580363641224741715320553196686026223052810587680065221); // vk.K[73].Y
        mul_input[2] = input[72];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[73] * input[72]
        mul_input[0] = uint256(2619648174856902280437657103399838361734222155643689423890717342295295771539); // vk.K[74].X
        mul_input[1] = uint256(13256372794721517278361771049354576682027862413139109791494199768622149829115); // vk.K[74].Y
        mul_input[2] = input[73];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[74] * input[73]
        mul_input[0] = uint256(1862721672669474499771128855516115789402098719754883128879952036195539231511); // vk.K[75].X
        mul_input[1] = uint256(5456218770703022699954022076421497906164658662998300968803692149588030099323); // vk.K[75].Y
        mul_input[2] = input[74];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[75] * input[74]
        mul_input[0] = uint256(409677328467291908915392607818119128687790090988017933307446369636188088520); // vk.K[76].X
        mul_input[1] = uint256(14197549323416707055753252134274499913715484371942661976702399651756198174492); // vk.K[76].Y
        mul_input[2] = input[75];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[76] * input[75]
        mul_input[0] = uint256(9557924145014968084021398772281396391652525286633681415851234148317613034372); // vk.K[77].X
        mul_input[1] = uint256(8233524942295949753675125194197645281321979444542058317284767717066285393411); // vk.K[77].Y
        mul_input[2] = input[76];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[77] * input[76]
        mul_input[0] = uint256(9668706846824703486485883986300585790874895623880645621398373533924295985685); // vk.K[78].X
        mul_input[1] = uint256(8416485793430198554014189913508346304137503557411134892711028291362512788286); // vk.K[78].Y
        mul_input[2] = input[77];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[78] * input[77]
        mul_input[0] = uint256(8172817894928560522949446697206445882047917098639040623711634996218520154190); // vk.K[79].X
        mul_input[1] = uint256(6396950108822133416661710098575243749671860317601338309217155303099712305537); // vk.K[79].Y
        mul_input[2] = input[78];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[79] * input[78]
        mul_input[0] = uint256(20095561693887446820201234085907500553986007002902217734458373253053306336774); // vk.K[80].X
        mul_input[1] = uint256(3295202517728013166586241597988713258748201016659045621431224186127811035890); // vk.K[80].Y
        mul_input[2] = input[79];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[80] * input[79]
        mul_input[0] = uint256(16814747811176051970025211273596638387565450195001355859639026484040350228009); // vk.K[81].X
        mul_input[1] = uint256(4091616821439585065152838445028748533280959136940391506272030366781473155147); // vk.K[81].Y
        mul_input[2] = input[80];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[81] * input[80]
        mul_input[0] = uint256(10778498640231734950001559709145612450911547302645649885307744049006928412302); // vk.K[82].X
        mul_input[1] = uint256(16519707167584061066095197930447178837138823777819273502603650267897791233881); // vk.K[82].Y
        mul_input[2] = input[81];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[82] * input[81]
        mul_input[0] = uint256(21425057181707497224038483489650283354415435662217698967496039811062280045928); // vk.K[83].X
        mul_input[1] = uint256(2676074705492020127072998826724607673377463833948607436201694207570223245582); // vk.K[83].Y
        mul_input[2] = input[82];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[83] * input[82]
        mul_input[0] = uint256(20064367110166934657266102404254949713023325035178834489049068984805236286253); // vk.K[84].X
        mul_input[1] = uint256(16423338268647407741757717012891309305028556494909406259557208694595476079692); // vk.K[84].Y
        mul_input[2] = input[83];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[84] * input[83]
        mul_input[0] = uint256(3842971201162928229876803391964557830126849639982716941704385319612587222647); // vk.K[85].X
        mul_input[1] = uint256(14356543739882513187676291469810622034882890250801913550463430931568080668578); // vk.K[85].Y
        mul_input[2] = input[84];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[85] * input[84]
        mul_input[0] = uint256(16034327051128007978969181621922101603393524563794714917176556433730587720784); // vk.K[86].X
        mul_input[1] = uint256(16841145523157510524963070650321204832336954625480512961655694696123469297525); // vk.K[86].Y
        mul_input[2] = input[85];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[86] * input[85]
        mul_input[0] = uint256(6127872271528295072868091968118683602266093195707067172912841840074108010668); // vk.K[87].X
        mul_input[1] = uint256(20713567586227808176602797361911731414427571630173035278719503371095236419039); // vk.K[87].Y
        mul_input[2] = input[86];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[87] * input[86]
        mul_input[0] = uint256(14699300892952109665628401928522855932673592802389442279372678459011914394053); // vk.K[88].X
        mul_input[1] = uint256(5966354961322236086795029683097694493780063856540856711827936475538647478506); // vk.K[88].Y
        mul_input[2] = input[87];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[88] * input[87]
        mul_input[0] = uint256(11930685783271806042199040735577971354194101926509404816459173731671591855660); // vk.K[89].X
        mul_input[1] = uint256(9424278819921675144200614924263925586682814681134347231074710109354095118082); // vk.K[89].Y
        mul_input[2] = input[88];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[89] * input[88]
        mul_input[0] = uint256(20398177160440753367841924925484917995397623478869190437877331767650013122308); // vk.K[90].X
        mul_input[1] = uint256(14470717931662619755918238711270350629448403132151597018750182009484783440853); // vk.K[90].Y
        mul_input[2] = input[89];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[90] * input[89]
        mul_input[0] = uint256(13444273898235408616052328534393603429734275248466037880298876583165011262416); // vk.K[91].X
        mul_input[1] = uint256(21278117669384469114337925654673378200393268155119794924953574490092392503082); // vk.K[91].Y
        mul_input[2] = input[90];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[91] * input[90]
        mul_input[0] = uint256(10950637878805193845348275008882570999600948713090002734370742198607682165864); // vk.K[92].X
        mul_input[1] = uint256(21880733340058447602767374300985530698740712947288072126550525673467886225121); // vk.K[92].Y
        mul_input[2] = input[91];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[92] * input[91]
        mul_input[0] = uint256(13088081408628860952391198041542622610978807910670935081892976914307760177872); // vk.K[93].X
        mul_input[1] = uint256(20344816945279604212940455249563264371926751309686331008970200372679673607729); // vk.K[93].Y
        mul_input[2] = input[92];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[93] * input[92]
        mul_input[0] = uint256(6530409902250240733761961318884383250597424838054770769887747342857649404805); // vk.K[94].X
        mul_input[1] = uint256(11513816075574372935209167355836661887922237131966618212352215314381697235987); // vk.K[94].Y
        mul_input[2] = input[93];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[94] * input[93]
        mul_input[0] = uint256(10639862391079776105609858116195448353810087654440356633983394404703565637282); // vk.K[95].X
        mul_input[1] = uint256(15758757462333652254992680807062578175008339699140688177608615902160626897713); // vk.K[95].Y
        mul_input[2] = input[94];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[95] * input[94]
        mul_input[0] = uint256(16588889141220682049881808421095073614877337677339982703882220738326522218245); // vk.K[96].X
        mul_input[1] = uint256(12184234134926296753156113344520317783532971795494235185177838408618809470182); // vk.K[96].Y
        mul_input[2] = input[95];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[96] * input[95]
        mul_input[0] = uint256(6386536757250696954159763477943256337865556967450868231768388075535980989300); // vk.K[97].X
        mul_input[1] = uint256(16047286412278969841537977989612827036011905402134088983787665436088243728272); // vk.K[97].Y
        mul_input[2] = input[96];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[97] * input[96]
        mul_input[0] = uint256(19484278954518711644259511973457914519015217733967020545911594426757751538132); // vk.K[98].X
        mul_input[1] = uint256(12280780374981138128226120115024581272635175265675800690230526543349039153890); // vk.K[98].Y
        mul_input[2] = input[97];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[98] * input[97]
        mul_input[0] = uint256(21398178935695251197719936553870242390358560289148528914283493457681799926059); // vk.K[99].X
        mul_input[1] = uint256(2928323805517467674565096858937168701487308539241963434453011548100336334423); // vk.K[99].Y
        mul_input[2] = input[98];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[99] * input[98]
        mul_input[0] = uint256(9453981497758289698187140256869753465909039221804790424300016888298229839685); // vk.K[100].X
        mul_input[1] = uint256(2192647098750288463456434231106299625013026629811310836891523940271667094241); // vk.K[100].Y
        mul_input[2] = input[99];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[100] * input[99]
        mul_input[0] = uint256(21518593423089985076677676545638634359414226384555640865369642006262956827848); // vk.K[101].X
        mul_input[1] = uint256(19104378139757714830079360600129492475006283733832716519065466331304492893297); // vk.K[101].Y
        mul_input[2] = input[100];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[101] * input[100]
        mul_input[0] = uint256(16873265281420924533692230130201359694879580147618634874061419969975846648628); // vk.K[102].X
        mul_input[1] = uint256(18117149252190113077764050238969151077597405547032790042665629783783447127024); // vk.K[102].Y
        mul_input[2] = input[101];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[102] * input[101]
        mul_input[0] = uint256(9116795101620416731585220089622886664560238649531486827418787792133354809587); // vk.K[103].X
        mul_input[1] = uint256(2651558936211592690081033662952224964212105327734170307125216441356288895227); // vk.K[103].Y
        mul_input[2] = input[102];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[103] * input[102]
        mul_input[0] = uint256(20753736683931792792873300419503825683748665041964161427985661888744117440134); // vk.K[104].X
        mul_input[1] = uint256(5166098336529125747976537589211957945949939478255103005403293099194806630243); // vk.K[104].Y
        mul_input[2] = input[103];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[104] * input[103]
        mul_input[0] = uint256(6465851555034422034649283758666672707605756540387006433435845341576956988223); // vk.K[105].X
        mul_input[1] = uint256(19492344249719387059951571690442923481002488119235110022516472785716300013390); // vk.K[105].Y
        mul_input[2] = input[104];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[105] * input[104]
        mul_input[0] = uint256(19017781099972385644081138763917345180204491157501581805149805244891659535466); // vk.K[106].X
        mul_input[1] = uint256(13373447161473033593567483263816812692423351640443537308181771363178799916198); // vk.K[106].Y
        mul_input[2] = input[105];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[106] * input[105]
        mul_input[0] = uint256(4897112494649134381546613684049731200364430333521678669342289854859917810239); // vk.K[107].X
        mul_input[1] = uint256(12827768808953236945220243133407097842849935732208673350702885399877109492039); // vk.K[107].Y
        mul_input[2] = input[106];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[107] * input[106]
        mul_input[0] = uint256(5672669938767382493883264002161952806735663598071576340423285674304941453128); // vk.K[108].X
        mul_input[1] = uint256(1442202193825319100258962994002097007268463791293445944378005296458111778932); // vk.K[108].Y
        mul_input[2] = input[107];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[108] * input[107]
        mul_input[0] = uint256(10333566626811902169759273877542788679032520149396588973018001761026111141227); // vk.K[109].X
        mul_input[1] = uint256(11757010544288134437675149585574692478768399994776436774374909912031102462250); // vk.K[109].Y
        mul_input[2] = input[108];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[109] * input[108]
        mul_input[0] = uint256(19359719494881970702840136069801856277825697435230172784881247014870751154845); // vk.K[110].X
        mul_input[1] = uint256(9380580266206638862645333543503347578905654326430093818100711225252755814649); // vk.K[110].Y
        mul_input[2] = input[109];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[110] * input[109]
        mul_input[0] = uint256(11154865268057903219129676962847722783739625507029526675992829943994372365863); // vk.K[111].X
        mul_input[1] = uint256(6710996332883432697461082629439802486192195178991751955736829971455322112320); // vk.K[111].Y
        mul_input[2] = input[110];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[111] * input[110]
        mul_input[0] = uint256(15217549138866512352888765403184056233777094674887022422201897656105677781820); // vk.K[112].X
        mul_input[1] = uint256(17582941175216503341491483871118391897604168861849919627091337833947407416964); // vk.K[112].Y
        mul_input[2] = input[111];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[112] * input[111]
        mul_input[0] = uint256(8184501781120274556644719614278284621036996983891228674514960529135584876636); // vk.K[113].X
        mul_input[1] = uint256(21717688879251534732777766595376838710331305459078570364248984901985537122368); // vk.K[113].Y
        mul_input[2] = input[112];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[113] * input[112]
        mul_input[0] = uint256(15763308214043610906092846433733437871876254247065503332128102225089752476040); // vk.K[114].X
        mul_input[1] = uint256(14531412024515694182266327233893053413066170911825386793009749364088727823391); // vk.K[114].Y
        mul_input[2] = input[113];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[114] * input[113]
        mul_input[0] = uint256(3902498602751633005610774530024519975456536237856860912578989090160584319789); // vk.K[115].X
        mul_input[1] = uint256(20720646774093402103329919220269172777737470464775428871052300805727288070263); // vk.K[115].Y
        mul_input[2] = input[114];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[115] * input[114]
        mul_input[0] = uint256(11057353228520899771191339425865272554617741584426498142863153707179458714999); // vk.K[116].X
        mul_input[1] = uint256(16199963334997818018163481205805271960171827444509401004749411905792759875989); // vk.K[116].Y
        mul_input[2] = input[115];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[116] * input[115]
        mul_input[0] = uint256(15624286948418148399070925933917763680927308921680219005035492030348411259787); // vk.K[117].X
        mul_input[1] = uint256(20093352635318398340783578694121967775632249376845391980828884519345829870848); // vk.K[117].Y
        mul_input[2] = input[116];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[117] * input[116]
        mul_input[0] = uint256(18330162011241473000764199274935423289917384269102415720789751813662057117648); // vk.K[118].X
        mul_input[1] = uint256(4841804458678847922745364496757369007255786863833689541440673229284740043120); // vk.K[118].Y
        mul_input[2] = input[117];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[118] * input[117]
        mul_input[0] = uint256(20769836922659885489548163326114120814289452712922821696916694083937290404273); // vk.K[119].X
        mul_input[1] = uint256(12859980123368834444365317720686309655417839194596997869995739820645937118703); // vk.K[119].Y
        mul_input[2] = input[118];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[119] * input[118]
        mul_input[0] = uint256(18646729048551372737256820624301607033089082364639014312002070708692531521164); // vk.K[120].X
        mul_input[1] = uint256(2675548941431811947160849165048580274446863124249714154803579051259819912686); // vk.K[120].Y
        mul_input[2] = input[119];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[120] * input[119]
        mul_input[0] = uint256(15714310888999232191165454708463279480883211661086376762003006855877206200274); // vk.K[121].X
        mul_input[1] = uint256(4646378610634039449801562882831064371891108714013300385173554047297411027179); // vk.K[121].Y
        mul_input[2] = input[120];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[121] * input[120]
        mul_input[0] = uint256(4021139932081863349187467309144646946372268120676456492271573895499488982630); // vk.K[122].X
        mul_input[1] = uint256(14339691496597404554381830009689685681553982736058665082487878489234485394298); // vk.K[122].Y
        mul_input[2] = input[121];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[122] * input[121]
        mul_input[0] = uint256(4556196081970501887081274058824836330080377183595945144334804243823105580877); // vk.K[123].X
        mul_input[1] = uint256(2646347816682636393735412111266233826660797614661811164909522589572419156327); // vk.K[123].Y
        mul_input[2] = input[122];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[123] * input[122]
        mul_input[0] = uint256(8494223325578190951518918120128360887508730427951323051128771222346942128931); // vk.K[124].X
        mul_input[1] = uint256(3506851490235300586258687807470841330443536543922080938263670724270291973521); // vk.K[124].Y
        mul_input[2] = input[123];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[124] * input[123]
        mul_input[0] = uint256(11843191415507335617173982078053235697192431128089688248122089704164762684416); // vk.K[125].X
        mul_input[1] = uint256(4168785286745551136880907177218492663150257531743418744160676765007681399682); // vk.K[125].Y
        mul_input[2] = input[124];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[125] * input[124]
        mul_input[0] = uint256(20727884679865733465330378453117853284655534089100009341177644328216565744405); // vk.K[126].X
        mul_input[1] = uint256(11013610538193530894657020356743127623664789229814487954812036702944611291115); // vk.K[126].Y
        mul_input[2] = input[125];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[126] * input[125]
        mul_input[0] = uint256(8093565550450036626695200296586532230400454748588311434046199727644374312229); // vk.K[127].X
        mul_input[1] = uint256(11371896018300626924717881246291624420244358025371260167399486244956797773271); // vk.K[127].Y
        mul_input[2] = input[126];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[127] * input[126]
        mul_input[0] = uint256(20343590670864378184350875561764753535656020452176778033591687955145618278919); // vk.K[128].X
        mul_input[1] = uint256(21793729158443376511398550737317393473128422626214641618594379051758131128913); // vk.K[128].Y
        mul_input[2] = input[127];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[128] * input[127]
        mul_input[0] = uint256(7640644586397592452987031438644628712069473865890491921268976790335956900933); // vk.K[129].X
        mul_input[1] = uint256(17831138452395783637677780618247239200859470175848617808405213422107792217662); // vk.K[129].Y
        mul_input[2] = input[128];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[129] * input[128]
        mul_input[0] = uint256(4525951540380440211091234653834183421883440080706911680441559841741263987178); // vk.K[130].X
        mul_input[1] = uint256(21108482552431941163628122709247518477051698392388024831232909480875789121151); // vk.K[130].Y
        mul_input[2] = input[129];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[130] * input[129]
        mul_input[0] = uint256(3467172709077847821207242562337467092029048391158893144814083198201930269557); // vk.K[131].X
        mul_input[1] = uint256(708533492352813380956843162924895249851579657048464330144782831298424252190); // vk.K[131].Y
        mul_input[2] = input[130];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[131] * input[130]
        mul_input[0] = uint256(11379988658164777979855190645913653894150128168857245592607406264039852960313); // vk.K[132].X
        mul_input[1] = uint256(12150253268631847640443458539334818092405564856747792862373329791773713704512); // vk.K[132].Y
        mul_input[2] = input[131];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[132] * input[131]
        mul_input[0] = uint256(21178846763083885954511482494467293674578013389445357564166512901731220279411); // vk.K[133].X
        mul_input[1] = uint256(20947083069541895187123635993354269801034904514891196773153246365302322002740); // vk.K[133].Y
        mul_input[2] = input[132];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[133] * input[132]
        mul_input[0] = uint256(17254833349471703134864911622536845070765053730175337693914093357557879691373); // vk.K[134].X
        mul_input[1] = uint256(726122332664578771033152381074813438379194729423305098525252937190997768307); // vk.K[134].Y
        mul_input[2] = input[133];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[134] * input[133]
        mul_input[0] = uint256(7985656150127725557847895591357644073605465428974300757604868478569374431550); // vk.K[135].X
        mul_input[1] = uint256(8622767926522696126695122556190747285945655782138899086590379697483621583267); // vk.K[135].Y
        mul_input[2] = input[134];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[135] * input[134]
        mul_input[0] = uint256(3195613007400057501079377249735882011722025991684469615980675540052260392988); // vk.K[136].X
        mul_input[1] = uint256(2546094765623712509949389891192193665553638029361944343733956062400296184538); // vk.K[136].Y
        mul_input[2] = input[135];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[136] * input[135]
        mul_input[0] = uint256(6394007454079721210787750964388306858069020958415411495530455802041030576473); // vk.K[137].X
        mul_input[1] = uint256(3013800686093752851650135807013974364671310273196898415437568823474226959338); // vk.K[137].Y
        mul_input[2] = input[136];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[137] * input[136]
        mul_input[0] = uint256(20859501264035976506940156516565782874860378230908679254476344471488136990506); // vk.K[138].X
        mul_input[1] = uint256(338279853181575236392988027571824370327075671776540301133880166947743870790); // vk.K[138].Y
        mul_input[2] = input[137];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[138] * input[137]
        mul_input[0] = uint256(13340349851164541529546373972746022156291978437568231615527506995159524322939); // vk.K[139].X
        mul_input[1] = uint256(12515870823392701816245248919496382142068079379884829830816836650631085383485); // vk.K[139].Y
        mul_input[2] = input[138];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[139] * input[138]
        mul_input[0] = uint256(7988250051387689023521949580587674721501480624101614460012594581188329280641); // vk.K[140].X
        mul_input[1] = uint256(9241748766334034770009495022574887425240176138340922187686263298539546113395); // vk.K[140].Y
        mul_input[2] = input[139];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[140] * input[139]
        mul_input[0] = uint256(662407190746151804848315391850734758047176341994777025981303408324115991438); // vk.K[141].X
        mul_input[1] = uint256(16390377107682211970785289475382757623166356640092483964796914720012419591776); // vk.K[141].Y
        mul_input[2] = input[140];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[141] * input[140]
        mul_input[0] = uint256(639882037223816971158796034917177929948369483439843594605397186693398267673); // vk.K[142].X
        mul_input[1] = uint256(2422664099927633647686774301597272737326619445210395957042255678582885440986); // vk.K[142].Y
        mul_input[2] = input[141];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[142] * input[141]
        mul_input[0] = uint256(19805578418776802243214797250694428813960701827142993592788807248857235616458); // vk.K[143].X
        mul_input[1] = uint256(11213971019681281878591884293611889813878767194196593163008488933376463824617); // vk.K[143].Y
        mul_input[2] = input[142];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[143] * input[142]
        mul_input[0] = uint256(16411213710180754507055761989709452204820411809101338706006812023523141896174); // vk.K[144].X
        mul_input[1] = uint256(13449486144728991219808943556605023272548654533495719807079769817799592826200); // vk.K[144].Y
        mul_input[2] = input[143];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[144] * input[143]
        mul_input[0] = uint256(6175370508393275369402572100760188362303854710507356362005722811944293172887); // vk.K[145].X
        mul_input[1] = uint256(12798280834858448577735387186133032133317027272719759925582044536083449058434); // vk.K[145].Y
        mul_input[2] = input[144];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[145] * input[144]
        mul_input[0] = uint256(2054140559346629125348729374722720507332451752250527172042641844870738374443); // vk.K[146].X
        mul_input[1] = uint256(6236432849577157912787352286873564841082964935537911102901384182813433768366); // vk.K[146].Y
        mul_input[2] = input[145];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[146] * input[145]
        mul_input[0] = uint256(3106656987666183361233430535907947104197107223787749525175775870523137739041); // vk.K[147].X
        mul_input[1] = uint256(10052154331395754266078626414011359049249744565898062134279629315053006517885); // vk.K[147].Y
        mul_input[2] = input[146];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[147] * input[146]
        mul_input[0] = uint256(3821218779193599653418386818728081386189331311512987663228742634408968988969); // vk.K[148].X
        mul_input[1] = uint256(12522821987097508054067286180161875464817797620219717243233131311842279709321); // vk.K[148].Y
        mul_input[2] = input[147];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[148] * input[147]
        mul_input[0] = uint256(8346050385838192222137320689829617320558773561831952677018088889047040703364); // vk.K[149].X
        mul_input[1] = uint256(19561517125727342646803563055304476252966395035429897722692261556642615464392); // vk.K[149].Y
        mul_input[2] = input[148];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[149] * input[148]
        mul_input[0] = uint256(10961259186894201552627500376266219375391898232137435207327815912470531266147); // vk.K[150].X
        mul_input[1] = uint256(3932234756552623573475228275755535975117825518269046843264200912442511114990); // vk.K[150].Y
        mul_input[2] = input[149];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[150] * input[149]
        mul_input[0] = uint256(9231935322787204180140764879481671680071051444682650026455090028312865789799); // vk.K[151].X
        mul_input[1] = uint256(15963031161226018448052213501132260127950321285497703208328106572859268764052); // vk.K[151].Y
        mul_input[2] = input[150];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[151] * input[150]
        mul_input[0] = uint256(13744653516819388076558625644305824871529299457847542865145606200572924238360); // vk.K[152].X
        mul_input[1] = uint256(18293549588618045962054590213957825720200997509225158230497183003430438881756); // vk.K[152].Y
        mul_input[2] = input[151];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[152] * input[151]
        mul_input[0] = uint256(19380545191493767203524306652016554645662512568301919514498366287148907163618); // vk.K[153].X
        mul_input[1] = uint256(3141078691969869522969288226005557558139677904183782131386171812989813839927); // vk.K[153].Y
        mul_input[2] = input[152];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[153] * input[152]
        mul_input[0] = uint256(15557029095985295814622733776952042012168293343267926966943752388793401247180); // vk.K[154].X
        mul_input[1] = uint256(7913475762001851619510295421818340257532693087494317292538297389845767497779); // vk.K[154].Y
        mul_input[2] = input[153];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[154] * input[153]
        mul_input[0] = uint256(7416949446397183907448754361447888751941866209841854088265411137020106478696); // vk.K[155].X
        mul_input[1] = uint256(6796477140136769663240659403666556385719354755408660225933311471600413285405); // vk.K[155].Y
        mul_input[2] = input[154];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[155] * input[154]
        mul_input[0] = uint256(886798131155139570311920159716925964442050592943398189432100504290417697756); // vk.K[156].X
        mul_input[1] = uint256(21585869528405674063541319426364101138349207730529929107414429988855201486712); // vk.K[156].Y
        mul_input[2] = input[155];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[156] * input[155]
        mul_input[0] = uint256(610754044054467318385894942312705539785081122917943392117841160878326779112); // vk.K[157].X
        mul_input[1] = uint256(2219516499581537986988224802978695878328988612505031479637046154436495726394); // vk.K[157].Y
        mul_input[2] = input[156];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[157] * input[156]
        mul_input[0] = uint256(9593270333533796285524017449165618969164698054648050749033319644480659239991); // vk.K[158].X
        mul_input[1] = uint256(10381094452561112545446804708640995188285001985415524587030462111350445404524); // vk.K[158].Y
        mul_input[2] = input[157];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[158] * input[157]
        mul_input[0] = uint256(11718089615206132768605380299288908761331531755702996509716355842014302501414); // vk.K[159].X
        mul_input[1] = uint256(7861084386134645426312864265384534937818093751464789530502474662138392451309); // vk.K[159].Y
        mul_input[2] = input[158];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[159] * input[158]
        mul_input[0] = uint256(18303150920181870640066488210568744033019003703261592233929595315329043039607); // vk.K[160].X
        mul_input[1] = uint256(12582493827748222081206926613054947258247152173221269178893298757595708955673); // vk.K[160].Y
        mul_input[2] = input[159];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[160] * input[159]
        mul_input[0] = uint256(16561776631506055814623777320004538650821386885988301702945826870311712848319); // vk.K[161].X
        mul_input[1] = uint256(3895172246073184816353224362425496313137371534783667858800030455347345813911); // vk.K[161].Y
        mul_input[2] = input[160];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[161] * input[160]
        mul_input[0] = uint256(8627808200992639608879849474135325966735842774943465758576178046005061326639); // vk.K[162].X
        mul_input[1] = uint256(17128024752496766862066069286691147390698632737176234695609426320465750584128); // vk.K[162].Y
        mul_input[2] = input[161];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[162] * input[161]
        mul_input[0] = uint256(4129536669509844881128991651705953484862392759387065476491009648767030485147); // vk.K[163].X
        mul_input[1] = uint256(21703787334697106562012345984821890104030079240096961054746254603892601938770); // vk.K[163].Y
        mul_input[2] = input[162];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[163] * input[162]
        mul_input[0] = uint256(2505787343200603394326295122298491260493332884624377224464150172795915433499); // vk.K[164].X
        mul_input[1] = uint256(5252143214042659746480072768637543686686278822428809048535419164152852194297); // vk.K[164].Y
        mul_input[2] = input[163];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[164] * input[163]
        mul_input[0] = uint256(10520267583441167913579635530074495593111055358054704342586971461937612336202); // vk.K[165].X
        mul_input[1] = uint256(18462226643124531765249241991696216927092537810748746575711273383968901338786); // vk.K[165].Y
        mul_input[2] = input[164];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[165] * input[164]
        mul_input[0] = uint256(10764535313873394133093135009523858262150946132264947397859185562494357004191); // vk.K[166].X
        mul_input[1] = uint256(19046768754380024572613132084712028688501277534978596855345246265270657410699); // vk.K[166].Y
        mul_input[2] = input[165];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[166] * input[165]
        mul_input[0] = uint256(3426395904981211053997975701959482853027242956255175033376387031173215221701); // vk.K[167].X
        mul_input[1] = uint256(18621461111043942661731565962786167330147239988367020782256670203951128243067); // vk.K[167].Y
        mul_input[2] = input[166];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[167] * input[166]
        mul_input[0] = uint256(12175717499800086100999133951219243565862124996044001301033224388924597199003); // vk.K[168].X
        mul_input[1] = uint256(11865312997886845781421927130911558726666634342315064614758998512335575860901); // vk.K[168].Y
        mul_input[2] = input[167];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[168] * input[167]
        mul_input[0] = uint256(16111606965590633711427747519665264228987184019525775988953261971590639083416); // vk.K[169].X
        mul_input[1] = uint256(16125541025882312171967089274488154017268236933814779380834453831249981366045); // vk.K[169].Y
        mul_input[2] = input[168];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[169] * input[168]
        mul_input[0] = uint256(1624786900783165439850178353055658590255168909180805303160483715263057058976); // vk.K[170].X
        mul_input[1] = uint256(12832959592916144180880217610673718243375540642061093594293277848011026492662); // vk.K[170].Y
        mul_input[2] = input[169];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[170] * input[169]
        mul_input[0] = uint256(21276432081996334004281887415477707360159083891885663981531889165426551053790); // vk.K[171].X
        mul_input[1] = uint256(21124421236125428405007687142210193473969060021688924539559880769009194419390); // vk.K[171].Y
        mul_input[2] = input[170];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[171] * input[170]
        mul_input[0] = uint256(17932112232344868659939287779714572708793833519203063372376258770871504142332); // vk.K[172].X
        mul_input[1] = uint256(9717143153332862484295967310998449083846743113371676839024062231471331733374); // vk.K[172].Y
        mul_input[2] = input[171];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[172] * input[171]
        mul_input[0] = uint256(17275723960338137103289680975905774095173563291250615751122227739346610071792); // vk.K[173].X
        mul_input[1] = uint256(4122532364043752198712009277835075088681559928853899352581462957460601300311); // vk.K[173].Y
        mul_input[2] = input[172];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[173] * input[172]
        mul_input[0] = uint256(10141257132936050343500504637701941503228842282924673098331527402675518668024); // vk.K[174].X
        mul_input[1] = uint256(18683533683434595189687718936093361580300101663896411631222654996880446217677); // vk.K[174].Y
        mul_input[2] = input[173];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[174] * input[173]
        mul_input[0] = uint256(1200806301955571009782166638439803688634485634495058874609187606167710834027); // vk.K[175].X
        mul_input[1] = uint256(3570951029011240019332772466693687676867454622861004078944141226452702427518); // vk.K[175].Y
        mul_input[2] = input[174];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[175] * input[174]
        mul_input[0] = uint256(3830655962261495583291104487583803795781512047199740159669438981936470200229); // vk.K[176].X
        mul_input[1] = uint256(19025688790083520055749909477995970902390425500373649751284331831030250717437); // vk.K[176].Y
        mul_input[2] = input[175];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[176] * input[175]
        mul_input[0] = uint256(4946991228042215735911581490016619604666742989711810564518653476446327120385); // vk.K[177].X
        mul_input[1] = uint256(4239752182716008397992902961059837791494816879917035321153796165772681534968); // vk.K[177].Y
        mul_input[2] = input[176];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[177] * input[176]
        mul_input[0] = uint256(6174414550186488891307946377007764677541775219816998170440543810285583634011); // vk.K[178].X
        mul_input[1] = uint256(15028509490601528349523533995803971644441091802330837033553168932657707693934); // vk.K[178].Y
        mul_input[2] = input[177];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[178] * input[177]
        mul_input[0] = uint256(21489723346021660696349407406424002480508879512252885294686173047619341667323); // vk.K[179].X
        mul_input[1] = uint256(200237453917896232428036465744705678773825688510830562990316521554312513736); // vk.K[179].Y
        mul_input[2] = input[178];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[179] * input[178]
        mul_input[0] = uint256(4031550328400511944751688324393727556083150564425031436005070677837502609432); // vk.K[180].X
        mul_input[1] = uint256(20801741966545921383625806629487134628034076563849369922809821257705493160959); // vk.K[180].Y
        mul_input[2] = input[179];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[180] * input[179]
        mul_input[0] = uint256(16498425724678981786759429405493155127844400646034449556934689745017921436979); // vk.K[181].X
        mul_input[1] = uint256(17110639600044577785033397293727456698667286195173655882120709289956405564878); // vk.K[181].Y
        mul_input[2] = input[180];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[181] * input[180]
        mul_input[0] = uint256(11288087967598749868943047905046521606766888951373698818418848818311582932290); // vk.K[182].X
        mul_input[1] = uint256(13601066009656489335447190462824935782776995958046984483659334012853184284472); // vk.K[182].Y
        mul_input[2] = input[181];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[182] * input[181]
        mul_input[0] = uint256(5775605990030730343848779457234442498794930568287769593251716914305603612406); // vk.K[183].X
        mul_input[1] = uint256(13500105636599999058137785859680205634386183854796638636006323645782215260757); // vk.K[183].Y
        mul_input[2] = input[182];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[183] * input[182]
        mul_input[0] = uint256(7522850839990729817007592117761918173389569449738434973394058601468226100656); // vk.K[184].X
        mul_input[1] = uint256(15623000315678446210380287203383308286711824315801873379366956206918055866090); // vk.K[184].Y
        mul_input[2] = input[183];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[184] * input[183]
        mul_input[0] = uint256(11090403877775656400383308678939213424633322107808981126715134481164998687477); // vk.K[185].X
        mul_input[1] = uint256(20640032120668302867500687396777966204763814738112426252310450111581960305600); // vk.K[185].Y
        mul_input[2] = input[184];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[185] * input[184]
        mul_input[0] = uint256(8920551372523518848984671873459124768928937562120741754111389280531508541459); // vk.K[186].X
        mul_input[1] = uint256(11150490291494609906463254675043590901229546622381764282394142649800493070488); // vk.K[186].Y
        mul_input[2] = input[185];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[186] * input[185]
        mul_input[0] = uint256(16218848339360018910855033048085054058136340151716365675274142064363816376805); // vk.K[187].X
        mul_input[1] = uint256(3116207002558591532098178021590030230984220659476497305586410515474900803403); // vk.K[187].Y
        mul_input[2] = input[186];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[187] * input[186]
        mul_input[0] = uint256(18825115641907948669633599590775969647005290406255389304376903769316313481263); // vk.K[188].X
        mul_input[1] = uint256(9238647299294729119609472385636581658684866496231423972733073159367818155214); // vk.K[188].Y
        mul_input[2] = input[187];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[188] * input[187]
        mul_input[0] = uint256(5375463489883241801061718849893037834706226403370179626028202271571872782705); // vk.K[189].X
        mul_input[1] = uint256(922713193786596695216331808296364142791949094132050604589986070152917049698); // vk.K[189].Y
        mul_input[2] = input[188];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[189] * input[188]
        mul_input[0] = uint256(18051272284872048479938453812900649363836442297215528481991694011858833670005); // vk.K[190].X
        mul_input[1] = uint256(14775927533933168153852694518945635753566261851055676570124125656823591630514); // vk.K[190].Y
        mul_input[2] = input[189];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[190] * input[189]
        mul_input[0] = uint256(4017661060461261841789226848619478555530312500157396333077088436202025326325); // vk.K[191].X
        mul_input[1] = uint256(18617921482606516621793960913013742438826167098565716472659039381189419439930); // vk.K[191].Y
        mul_input[2] = input[190];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[191] * input[190]
        mul_input[0] = uint256(8083752061372423774925739108718588344467503760843556710811368313905646961715); // vk.K[192].X
        mul_input[1] = uint256(18437590988328338585225890612638636678465340151177850237532483009137374837045); // vk.K[192].Y
        mul_input[2] = input[191];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[192] * input[191]
        mul_input[0] = uint256(17989384370342759302682469058573069197965564499832462758579288274767652341482); // vk.K[193].X
        mul_input[1] = uint256(17906854339489052141117692090831928546474787558655475308248983679946390503197); // vk.K[193].Y
        mul_input[2] = input[192];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[193] * input[192]
        mul_input[0] = uint256(13424591402723443608924820836777282380359855523290339596840538309841991825376); // vk.K[194].X
        mul_input[1] = uint256(11380502723522782510011361316457586530196741869562991141476507967557293885382); // vk.K[194].Y
        mul_input[2] = input[193];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[194] * input[193]
        mul_input[0] = uint256(12770886586434055056185053967835485410329816395916790179015784945719408620317); // vk.K[195].X
        mul_input[1] = uint256(5332655531687247921380583397169047606488221794217055886287617396353541543176); // vk.K[195].Y
        mul_input[2] = input[194];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[195] * input[194]
        mul_input[0] = uint256(9022918439713589146415743491782169345006968468059628628987888916706047972789); // vk.K[196].X
        mul_input[1] = uint256(2030325436813747025390189692609201159892933964866753838165887565568387233649); // vk.K[196].Y
        mul_input[2] = input[195];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[196] * input[195]
        mul_input[0] = uint256(6727282752950543293931131892183257365309692572607165717633481213824663749922); // vk.K[197].X
        mul_input[1] = uint256(2189058511633908410641868529811301752198113995971089994255230972409771782258); // vk.K[197].Y
        mul_input[2] = input[196];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[197] * input[196]
        mul_input[0] = uint256(3834264591167121914818153929933675730470622117911868481413749917681359331426); // vk.K[198].X
        mul_input[1] = uint256(9292531204565890808769508391555894704829790683403016792819987684963480035293); // vk.K[198].Y
        mul_input[2] = input[197];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[198] * input[197]
        mul_input[0] = uint256(3441923761089754271664360062644897604538769790078601436909819197773829744475); // vk.K[199].X
        mul_input[1] = uint256(16174209914690464713421170372368737525502839563223502645789708881913204103309); // vk.K[199].Y
        mul_input[2] = input[198];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[199] * input[198]
        mul_input[0] = uint256(9681152137577679149715339892414247484198104405663823800411050777205127240556); // vk.K[200].X
        mul_input[1] = uint256(21236594748640851543784156466669909399672854648385650366588614667220621905599); // vk.K[200].Y
        mul_input[2] = input[199];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[200] * input[199]
        mul_input[0] = uint256(2205050094242166108386284983940810212078112792091750349227655661753404017429); // vk.K[201].X
        mul_input[1] = uint256(16174239132993413807903759316267762234967094543961878993132954818732417677358); // vk.K[201].Y
        mul_input[2] = input[200];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[201] * input[200]
        mul_input[0] = uint256(12086589004855532725733252895659582751984973112230119013855419620813201569941); // vk.K[202].X
        mul_input[1] = uint256(18312601164139491673112552477000623996473946405768675809505789005697160381416); // vk.K[202].Y
        mul_input[2] = input[201];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[202] * input[201]
        mul_input[0] = uint256(10910339305785276584774497871798303158531545343839062894352834127799172054975); // vk.K[203].X
        mul_input[1] = uint256(3446008774283239725996423424797955365280109019108696921219037797611175414720); // vk.K[203].Y
        mul_input[2] = input[202];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[203] * input[202]
        mul_input[0] = uint256(1312776783350132686286925667640638963151604296671016426183284360631214858726); // vk.K[204].X
        mul_input[1] = uint256(15305732281565487675133839776432283851535219622614992510676729480511801630839); // vk.K[204].Y
        mul_input[2] = input[203];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[204] * input[203]
        mul_input[0] = uint256(18920852619708034678474764911248118012535404003167056518611963699078792483816); // vk.K[205].X
        mul_input[1] = uint256(10157889468945840893121755642963023218627665420748233166774247657570241123192); // vk.K[205].Y
        mul_input[2] = input[204];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[205] * input[204]
        mul_input[0] = uint256(7655679327263394135075256199116637693471047127615695248846303114312892262346); // vk.K[206].X
        mul_input[1] = uint256(18413141581027346979266338190908385909499919790862407850296708829299619338605); // vk.K[206].Y
        mul_input[2] = input[205];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[206] * input[205]
        mul_input[0] = uint256(11375722825580517703602782744849181845191382397035352842771600069966346108260); // vk.K[207].X
        mul_input[1] = uint256(10978295973852955063818386968182866687316031206002198179675727857713025224829); // vk.K[207].Y
        mul_input[2] = input[206];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[207] * input[206]
        mul_input[0] = uint256(15165987322342917335069466810367961366218442856483556989724511512410415596567); // vk.K[208].X
        mul_input[1] = uint256(17578833683314001436464525521769744303696990171114819734848674886255278870354); // vk.K[208].Y
        mul_input[2] = input[207];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[208] * input[207]
        mul_input[0] = uint256(5485021884775815146589469271703823411951228692067142227340736472260523528460); // vk.K[209].X
        mul_input[1] = uint256(17542882784466394994553458859676124207658348723610173153889695979417374568219); // vk.K[209].Y
        mul_input[2] = input[208];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[209] * input[208]
        mul_input[0] = uint256(283084592475688065254465138233407806434316506272285556500321970269462961395); // vk.K[210].X
        mul_input[1] = uint256(634090815049081188832902344124571078185942656006864010244736016323125540813); // vk.K[210].Y
        mul_input[2] = input[209];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[210] * input[209]
        mul_input[0] = uint256(8203911275492800454385768100730439324826257817246821768710772339736331023522); // vk.K[211].X
        mul_input[1] = uint256(16126957519929425853364803450923415198615625303847959596749188475684542671250); // vk.K[211].Y
        mul_input[2] = input[210];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[211] * input[210]
        mul_input[0] = uint256(7899078149385932259281778416814916279577292575346672624051031731311140199159); // vk.K[212].X
        mul_input[1] = uint256(10752688998775223630332414117458266958864003058345118406072049220038578069392); // vk.K[212].Y
        mul_input[2] = input[211];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[212] * input[211]
        mul_input[0] = uint256(3883645614569790367641453835020802857243628304314005867980495511108179989098); // vk.K[213].X
        mul_input[1] = uint256(12405018067923651439333603027087130488795232356865916329905617891866589056866); // vk.K[213].Y
        mul_input[2] = input[212];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[213] * input[212]
        mul_input[0] = uint256(18642005404976564508706874651800877755316474762219317415220914971519844204858); // vk.K[214].X
        mul_input[1] = uint256(20026156524201938018650786000063173936969306466141875013499101630137083180323); // vk.K[214].Y
        mul_input[2] = input[213];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[214] * input[213]
        mul_input[0] = uint256(17395310122491715044609433050363490137538124610256846460795751743939738450338); // vk.K[215].X
        mul_input[1] = uint256(4187895056747323300664863445131508854651377204624068677115350778853012037238); // vk.K[215].Y
        mul_input[2] = input[214];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[215] * input[214]
        mul_input[0] = uint256(2232408946337520259270723163612911225394735942659549594113078219592461523162); // vk.K[216].X
        mul_input[1] = uint256(7814513622413864665307699738386960396704525639576585626798123633400071547975); // vk.K[216].Y
        mul_input[2] = input[215];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[216] * input[215]
        mul_input[0] = uint256(13986376672620620869571389669760100931684728650722083107447266517866806409639); // vk.K[217].X
        mul_input[1] = uint256(17707606696583368235479488248223627357917201563339143568393729338934747853102); // vk.K[217].Y
        mul_input[2] = input[216];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[217] * input[216]
        mul_input[0] = uint256(17890788131994490933800047483328755352092167690023479788294138773619446609424); // vk.K[218].X
        mul_input[1] = uint256(9300032324175410049668969001329746128944128443680612721180939729683444074973); // vk.K[218].Y
        mul_input[2] = input[217];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[218] * input[217]
        mul_input[0] = uint256(10071389027343985108948547729101179032499230486952768861894050769145413046404); // vk.K[219].X
        mul_input[1] = uint256(11091701125636273441655899559010122360564104663086059640293621691861255523346); // vk.K[219].Y
        mul_input[2] = input[218];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[219] * input[218]
        mul_input[0] = uint256(17538389092663456206743285698514140899071414205221929225752977105198458571756); // vk.K[220].X
        mul_input[1] = uint256(10615613355736663259797062377403599542278394926072976559674224466077322838269); // vk.K[220].Y
        mul_input[2] = input[219];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[220] * input[219]
        mul_input[0] = uint256(7460464724220702033150785530723268598399890408424596836661538897620584244709); // vk.K[221].X
        mul_input[1] = uint256(5808762850330153938388083042182627789944902378161905486563295763035741235731); // vk.K[221].Y
        mul_input[2] = input[220];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[221] * input[220]
        mul_input[0] = uint256(4691345320308066920511129033036580051069743282390777329045081566647864647132); // vk.K[222].X
        mul_input[1] = uint256(7551726144818489151661083764197517662015089988806671857974156390600020615582); // vk.K[222].Y
        mul_input[2] = input[221];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[222] * input[221]
        mul_input[0] = uint256(10408349955194359631305168369971385700243783822918586570283193062172220675854); // vk.K[223].X
        mul_input[1] = uint256(2406555610003582955441216404502239091739741997145931652119743144938418326095); // vk.K[223].Y
        mul_input[2] = input[222];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[223] * input[222]
        mul_input[0] = uint256(2374505346174388593636837407354864408099514611725317916394719025892283494658); // vk.K[224].X
        mul_input[1] = uint256(13966308801456279673131887045373084609968222204997910574255123588834895973542); // vk.K[224].Y
        mul_input[2] = input[223];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[224] * input[223]
        mul_input[0] = uint256(4843436320944414464421767097944458985499480036812788078755004062166226369642); // vk.K[225].X
        mul_input[1] = uint256(20452926672955160573844444439917451970768258202949722306595345400497585566796); // vk.K[225].Y
        mul_input[2] = input[224];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[225] * input[224]
        mul_input[0] = uint256(13671246912146496622363453371879364726407746725089562184458951892269409592274); // vk.K[226].X
        mul_input[1] = uint256(8728329432006212351161142303011724340589057116271003085630234379974405018159); // vk.K[226].Y
        mul_input[2] = input[225];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[226] * input[225]
        mul_input[0] = uint256(297686103685749948780418187825370356313910130918892168152957458606207249122); // vk.K[227].X
        mul_input[1] = uint256(7283466906484287598219094506695507707269835353323393253823987011745374568379); // vk.K[227].Y
        mul_input[2] = input[226];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[227] * input[226]
        mul_input[0] = uint256(10176429192460051473885147370554606545943196418087559537926523637740879999896); // vk.K[228].X
        mul_input[1] = uint256(6906528794202931988976460184505679992688000831354775908564095519838648276378); // vk.K[228].Y
        mul_input[2] = input[227];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[228] * input[227]
        mul_input[0] = uint256(14136911730128136121695693631529018032799926582940922361761141646348699499180); // vk.K[229].X
        mul_input[1] = uint256(11069287346889724377622529961441760233364229746755300385722498529445983659985); // vk.K[229].Y
        mul_input[2] = input[228];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[229] * input[228]
        mul_input[0] = uint256(10468598282188638985197679275389845771257883205635978019462762083810015420545); // vk.K[230].X
        mul_input[1] = uint256(3664404661875504761211412552525928553414650722540357034236220894989363395855); // vk.K[230].Y
        mul_input[2] = input[229];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[230] * input[229]
        mul_input[0] = uint256(13246655725796074807237925045649153798680976506297514065984850399050008205116); // vk.K[231].X
        mul_input[1] = uint256(9934096335141613053695804559507864260462163581336262457147974645364499494307); // vk.K[231].Y
        mul_input[2] = input[230];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[231] * input[230]
        mul_input[0] = uint256(7227410167868073775482702718877207644350213205337030447375719464089215971252); // vk.K[232].X
        mul_input[1] = uint256(8566946347837605377466152413686044479548888703831241974117190309599103870071); // vk.K[232].Y
        mul_input[2] = input[231];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[232] * input[231]
        mul_input[0] = uint256(17931785380942612135593905990452607486049612685758624968896956954912500255919); // vk.K[233].X
        mul_input[1] = uint256(18323227762049691612840296893310301371248679103148471644844480935424870233918); // vk.K[233].Y
        mul_input[2] = input[232];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[233] * input[232]
        mul_input[0] = uint256(16101373099369214755910640710964677281025476263340547481795704893105261716850); // vk.K[234].X
        mul_input[1] = uint256(18091052116026930995905274982900583845240492431286000799946356226711862657727); // vk.K[234].Y
        mul_input[2] = input[233];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[234] * input[233]
        mul_input[0] = uint256(3411507113498436846422394600246344760566143569463556992310756732527230999256); // vk.K[235].X
        mul_input[1] = uint256(6735821221361365965373582756213244335413211388957969102689486995293539062208); // vk.K[235].Y
        mul_input[2] = input[234];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[235] * input[234]
        mul_input[0] = uint256(1949011763513419209369122287444237324769906151795319255199253012020117843145); // vk.K[236].X
        mul_input[1] = uint256(14896928541982962485045280600294789961045681416703276232562260852948498110865); // vk.K[236].Y
        mul_input[2] = input[235];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[236] * input[235]
        mul_input[0] = uint256(16676692827294533255912753382027465407833892253169009202720593377570097172740); // vk.K[237].X
        mul_input[1] = uint256(18855138605553648735755143747273008824690397953148179772023327178752470837167); // vk.K[237].Y
        mul_input[2] = input[236];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[237] * input[236]
        mul_input[0] = uint256(20250487592866937991942062442041687614805666597081353619786907827803699637526); // vk.K[238].X
        mul_input[1] = uint256(18845884702143096179226327010801223695166273722969396746128357272379364513804); // vk.K[238].Y
        mul_input[2] = input[237];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[238] * input[237]
        mul_input[0] = uint256(17010556322474636111820225089347864142899575890287313112585655920267480725340); // vk.K[239].X
        mul_input[1] = uint256(7879353889235576125742246272669304559519254485051729414854458856559429625049); // vk.K[239].Y
        mul_input[2] = input[238];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[239] * input[238]
        mul_input[0] = uint256(5923706856268030191826044616062503490958915129756201132943389176609978372850); // vk.K[240].X
        mul_input[1] = uint256(3608167350252437941857119747301663164627597676494836652438392604028681516881); // vk.K[240].Y
        mul_input[2] = input[239];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[240] * input[239]
        mul_input[0] = uint256(9369867033528827894268910655931480950607233208951285027209246228577617657935); // vk.K[241].X
        mul_input[1] = uint256(12101008057449516389806918235149966938618414127575528581437862627387210625032); // vk.K[241].Y
        mul_input[2] = input[240];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[241] * input[240]
        mul_input[0] = uint256(3190870263626548394543908043207211219232737903011444673560254269785613249298); // vk.K[242].X
        mul_input[1] = uint256(10863438923358195538078301728737046306582678312898855879629405206941932518652); // vk.K[242].Y
        mul_input[2] = input[241];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[242] * input[241]
        mul_input[0] = uint256(8583220858643400879155094533794092003902187945607175857306246693127117719461); // vk.K[243].X
        mul_input[1] = uint256(6278631654669091068161760246261977449284249260864241244283186796328272847278); // vk.K[243].Y
        mul_input[2] = input[242];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[243] * input[242]
        mul_input[0] = uint256(3558667398791852112053334907140466815207740189045811498772383067267140951314); // vk.K[244].X
        mul_input[1] = uint256(2507071518148912798268691614113570627977015852053144937229652120299748212749); // vk.K[244].Y
        mul_input[2] = input[243];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[244] * input[243]
        mul_input[0] = uint256(1888676616121145775664529695460503179785855180837811829199695520414326822147); // vk.K[245].X
        mul_input[1] = uint256(17078954890996816406399653112550806515178799373346654893255612634881168285388); // vk.K[245].Y
        mul_input[2] = input[244];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[245] * input[244]
        mul_input[0] = uint256(19388641166592391718826602408500705612592615924064996005510045517056977515478); // vk.K[246].X
        mul_input[1] = uint256(301095582983841930445658719634308812091798031001300590064263029358276950442); // vk.K[246].Y
        mul_input[2] = input[245];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[246] * input[245]
        mul_input[0] = uint256(3751732765997059384204734897921632068177541849376656567670853451574834418529); // vk.K[247].X
        mul_input[1] = uint256(12829841993954795422661746361000377770044755547689803807041031775589328666826); // vk.K[247].Y
        mul_input[2] = input[246];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[247] * input[246]
        mul_input[0] = uint256(7564570197875489352657657405529811787648649883951530905317121555304364076529); // vk.K[248].X
        mul_input[1] = uint256(7632189763246479583727993290184398002017730208373369334317799782631979487252); // vk.K[248].Y
        mul_input[2] = input[247];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[248] * input[247]
        mul_input[0] = uint256(8523090626324612911668651254030920079132601765281834949343869803705143982990); // vk.K[249].X
        mul_input[1] = uint256(5821102827552227688226401944015060208583684701025376722665750845015598187642); // vk.K[249].Y
        mul_input[2] = input[248];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[249] * input[248]
        mul_input[0] = uint256(19973026819595887599904611114448972332146949796694505311697092010772508251755); // vk.K[250].X
        mul_input[1] = uint256(12710140042734587780572039032213772394990654552759559413956800847989042340613); // vk.K[250].Y
        mul_input[2] = input[249];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[250] * input[249]
        mul_input[0] = uint256(10990639866872683528606471046685649350653049637688559720403776017774095556830); // vk.K[251].X
        mul_input[1] = uint256(15121875113823801800562131658423244688049944659425173561748403600869567881601); // vk.K[251].Y
        mul_input[2] = input[250];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[251] * input[250]
        mul_input[0] = uint256(15318560722863055131608505454743618679886142517344833277125745638753477979811); // vk.K[252].X
        mul_input[1] = uint256(11215338489205132081640893538401056278767297365514318903256796836636031133072); // vk.K[252].Y
        mul_input[2] = input[251];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[252] * input[251]
        mul_input[0] = uint256(170124663972088308109920750140320408625723167770961219815151348439047999035); // vk.K[253].X
        mul_input[1] = uint256(12352681203225991982592982026172251126220934538055572587758123564919124536356); // vk.K[253].Y
        mul_input[2] = input[252];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[253] * input[252]
        mul_input[0] = uint256(8400753124083221935507195018250025749662689944773758297108194053912640615670); // vk.K[254].X
        mul_input[1] = uint256(21139983148878065019486080620758101148444591843742689024507162964072595707270); // vk.K[254].Y
        mul_input[2] = input[253];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[254] * input[253]
        mul_input[0] = uint256(5455015692788542454356134041249818598829438103442207045851084002311739396913); // vk.K[255].X
        mul_input[1] = uint256(18525722135273744656721442837042179838913543458118952476224469914238446624097); // vk.K[255].Y
        mul_input[2] = input[254];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[255] * input[254]
        mul_input[0] = uint256(1122558489048374256114752814740109620234843691033299726303873081711461403201); // vk.K[256].X
        mul_input[1] = uint256(9730339724032782695277243913120626834428368200136350346423879808356510826286); // vk.K[256].Y
        mul_input[2] = input[255];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[256] * input[255]
        mul_input[0] = uint256(5757961921945898430624227223870043195349177993713328685532643903578130252902); // vk.K[257].X
        mul_input[1] = uint256(5466476829663097102769026413501064673059190067244648546118281426714928720853); // vk.K[257].Y
        mul_input[2] = input[256];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[257] * input[256]
        mul_input[0] = uint256(14594796956890833985779814921544213671785318594380148146003006049661486300028); // vk.K[258].X
        mul_input[1] = uint256(11650065617549211457115328406809223062497009210162668979468253413317312385944); // vk.K[258].Y
        mul_input[2] = input[257];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[258] * input[257]
        mul_input[0] = uint256(5440121640454277835905052647338694398174978818193852657836237999486183116539); // vk.K[259].X
        mul_input[1] = uint256(6108151278609179107136356127018301575621814454648998672990554432823537772502); // vk.K[259].Y
        mul_input[2] = input[258];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[259] * input[258]
        mul_input[0] = uint256(534461901274772425749174527595552253462802669518495971960818377698017426231); // vk.K[260].X
        mul_input[1] = uint256(19971525318711515896246550498580716180811102562390274536173100089495528160236); // vk.K[260].Y
        mul_input[2] = input[259];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[260] * input[259]
        mul_input[0] = uint256(21409778990889462455302858636155577293921826702675334056015464436657323329594); // vk.K[261].X
        mul_input[1] = uint256(7457415128217827365302781057259979584948137968432198555357560222575803689874); // vk.K[261].Y
        mul_input[2] = input[260];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[261] * input[260]
        mul_input[0] = uint256(2988250986235786063527942987308202986562563349571399091327037451983841075736); // vk.K[262].X
        mul_input[1] = uint256(1324302384749011189300265767238034702274596335685960541191578030001755497928); // vk.K[262].Y
        mul_input[2] = input[261];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[262] * input[261]
        mul_input[0] = uint256(21792908437271741511460016136156447241045964410918727340081796721362326748811); // vk.K[263].X
        mul_input[1] = uint256(20593698635731679284027577470123989757770233442331293712413192741487447912846); // vk.K[263].Y
        mul_input[2] = input[262];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[263] * input[262]
        mul_input[0] = uint256(9630739279307848489325434204011561083979596103168149501286390358935573733185); // vk.K[264].X
        mul_input[1] = uint256(11136141187970315698610117766861403596438096213822689711895249263475780913679); // vk.K[264].Y
        mul_input[2] = input[263];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[264] * input[263]
        mul_input[0] = uint256(565154826063935228772445484527553242319137924792661953223631205363555801878); // vk.K[265].X
        mul_input[1] = uint256(4871142428519316932567833517202281463464862367278765590713576758251101762958); // vk.K[265].Y
        mul_input[2] = input[264];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[265] * input[264]
        mul_input[0] = uint256(12914910537424827448102589215590150936644568622001638607021391222177062851257); // vk.K[266].X
        mul_input[1] = uint256(18012120172011587445591884354042048721455021769056782578869759838263781255767); // vk.K[266].Y
        mul_input[2] = input[265];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[266] * input[265]
        mul_input[0] = uint256(12398410715942602525133154959942062301148966723957156458477289661229972137501); // vk.K[267].X
        mul_input[1] = uint256(3257687328448409539906064468638950896920646817828069874365696900299376968988); // vk.K[267].Y
        mul_input[2] = input[266];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[267] * input[266]
        mul_input[0] = uint256(17478822620429313965640164507876907648871690215427905819277284011540124165259); // vk.K[268].X
        mul_input[1] = uint256(14317031434199696402101556203043103038409819887448984304647480180377107290793); // vk.K[268].Y
        mul_input[2] = input[267];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[268] * input[267]
        mul_input[0] = uint256(16589264467901191268148957206096623710658938796513733490848195860206808397927); // vk.K[269].X
        mul_input[1] = uint256(14902278628711367352971374422723285250122278569983520350246921765279439660667); // vk.K[269].Y
        mul_input[2] = input[268];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[269] * input[268]
        mul_input[0] = uint256(11468429194654381219835257774633011127434093195318548662435681003944511336793); // vk.K[270].X
        mul_input[1] = uint256(10765447746607465984825015935493476292096681877829901440802343928388551788335); // vk.K[270].Y
        mul_input[2] = input[269];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[270] * input[269]
        mul_input[0] = uint256(12890090527716511841680969173789592279632632589896842034225720162392415972322); // vk.K[271].X
        mul_input[1] = uint256(14074756483702380850443645762752816762610151668945454728564472188251655983972); // vk.K[271].Y
        mul_input[2] = input[270];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[271] * input[270]
        mul_input[0] = uint256(7637854504095741949939088073942869856784247700810268028291986085395178851234); // vk.K[272].X
        mul_input[1] = uint256(6952004803313448673026589345874187945898635550846100519561338606993994701662); // vk.K[272].Y
        mul_input[2] = input[271];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[272] * input[271]
        mul_input[0] = uint256(14060851234915995900312354478233171062631072471004709907122726573370391581207); // vk.K[273].X
        mul_input[1] = uint256(13953196891605908915091080577301278842792200218082648317757855411286187009280); // vk.K[273].Y
        mul_input[2] = input[272];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[273] * input[272]
        mul_input[0] = uint256(15709050113419278702722548490060050404493755594451095141768236557826303981846); // vk.K[274].X
        mul_input[1] = uint256(9986460361430983365709616079353428964922094633844290552191532658033663902064); // vk.K[274].Y
        mul_input[2] = input[273];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[274] * input[273]
        mul_input[0] = uint256(14802154633112502412265560451427953750171608832015983137829429232653897360355); // vk.K[275].X
        mul_input[1] = uint256(18385577658086662804609606462615767273826364779679646306698314568925719096066); // vk.K[275].Y
        mul_input[2] = input[274];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[275] * input[274]
        mul_input[0] = uint256(6880839429004389860232225387483019110677463457976998823480772984733741426887); // vk.K[276].X
        mul_input[1] = uint256(17630914018105208612225648938867691376636626027086683434030683242238381267863); // vk.K[276].Y
        mul_input[2] = input[275];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[276] * input[275]
        mul_input[0] = uint256(8751667103893110612095009425882926905745001542426139218394139681525428559483); // vk.K[277].X
        mul_input[1] = uint256(8052789373532539234018410386160522826875427766737483142536389677794612898364); // vk.K[277].Y
        mul_input[2] = input[276];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[277] * input[276]
        mul_input[0] = uint256(9340134320153240083400634207892285664322109264121536036917871522329723128738); // vk.K[278].X
        mul_input[1] = uint256(7829511369988050875399033504576171694752378131135253092740840958269636828097); // vk.K[278].Y
        mul_input[2] = input[277];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[278] * input[277]
        mul_input[0] = uint256(7472911135604831723179661589045680775652301352787878121503825072400601565047); // vk.K[279].X
        mul_input[1] = uint256(21756577074751964139417091405425200746300433861223206743098334843579161388913); // vk.K[279].Y
        mul_input[2] = input[278];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[279] * input[278]
        mul_input[0] = uint256(20933082092787718398176050567025792757090455543678424802708070035885534192372); // vk.K[280].X
        mul_input[1] = uint256(7118864622225073958307433331167403415894598479109510968735733744268031097672); // vk.K[280].Y
        mul_input[2] = input[279];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[280] * input[279]
        mul_input[0] = uint256(3396844279544525902788502896708202929754063769659137184942119614030419301206); // vk.K[281].X
        mul_input[1] = uint256(2757928161538463744704469413976820265717132006919582057260724510986519350773); // vk.K[281].Y
        mul_input[2] = input[280];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[281] * input[280]
        mul_input[0] = uint256(13249112613275710767238449169443996665194966245879838659589044218562410127487); // vk.K[282].X
        mul_input[1] = uint256(18197224462196245460508763146696989508702718359619485489901457168407384257411); // vk.K[282].Y
        mul_input[2] = input[281];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[282] * input[281]
        mul_input[0] = uint256(1485998180816086392365388085866299743066684805367876578055801355418881327021); // vk.K[283].X
        mul_input[1] = uint256(19153459863231549871322588812369330315799100801243926377409519079806123130353); // vk.K[283].Y
        mul_input[2] = input[282];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[283] * input[282]
        mul_input[0] = uint256(15766377597879280010440669729674107513902383946221457820332656801486804192289); // vk.K[284].X
        mul_input[1] = uint256(16846586346696116253342588790859524189375601948310106000191631336847825604502); // vk.K[284].Y
        mul_input[2] = input[283];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[284] * input[283]
        mul_input[0] = uint256(429053060479677054105019477321380466344601412258285723272352423951559251706); // vk.K[285].X
        mul_input[1] = uint256(14101871507916951746636041111707930113758447156001159986975934192026402098493); // vk.K[285].Y
        mul_input[2] = input[284];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[285] * input[284]
        mul_input[0] = uint256(20714474559624441223587482584726353924658401034913996538879264193999976747889); // vk.K[286].X
        mul_input[1] = uint256(8293941719621181679344618985157696052544459532608506861595078051495659928470); // vk.K[286].Y
        mul_input[2] = input[285];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[286] * input[285]
        mul_input[0] = uint256(16070984656527059021096192969334026748653077585212602603388674572933559106730); // vk.K[287].X
        mul_input[1] = uint256(7899147251002707280760717816522111809304104364713789085582290178888806972989); // vk.K[287].Y
        mul_input[2] = input[286];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[287] * input[286]
        mul_input[0] = uint256(16269930592472904684524739207698432759335012043228789336825109973904055477627); // vk.K[288].X
        mul_input[1] = uint256(579124644023167870023308461572682422598645411519657275684086426447278104611); // vk.K[288].Y
        mul_input[2] = input[287];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[288] * input[287]
        mul_input[0] = uint256(18615487132754302696625357634983843176346450748803467667282106496596623487671); // vk.K[289].X
        mul_input[1] = uint256(18115125247247809600373797337949557305280120301805786430014143457650894618187); // vk.K[289].Y
        mul_input[2] = input[288];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[289] * input[288]
        mul_input[0] = uint256(19289585592563998841825140451385703381918692115573431666036757064346735157816); // vk.K[290].X
        mul_input[1] = uint256(10500674760864984900913516512668787966980620899048199227844661847644795863152); // vk.K[290].Y
        mul_input[2] = input[289];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[290] * input[289]
        mul_input[0] = uint256(5806561583808258755724484651042804756346197839696758017397451373171310813470); // vk.K[291].X
        mul_input[1] = uint256(20043954607197845764766060319617098872300562007769949832687325273507725637972); // vk.K[291].Y
        mul_input[2] = input[290];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[291] * input[290]
        mul_input[0] = uint256(17722274522040381112387623848308125814733540965060933559343782849310482540775); // vk.K[292].X
        mul_input[1] = uint256(4749360313618039912970772392020802459977858120940895315763947395632241701851); // vk.K[292].Y
        mul_input[2] = input[291];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[292] * input[291]
        mul_input[0] = uint256(11946327268760509436078802645208245600550920722398159172210630972594007758637); // vk.K[293].X
        mul_input[1] = uint256(16491346861490774015885237569920964407402859427985025702107224825931371543052); // vk.K[293].Y
        mul_input[2] = input[292];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[293] * input[292]
        mul_input[0] = uint256(16272097962919209813985071403025954372022380353919710242421972093006683287062); // vk.K[294].X
        mul_input[1] = uint256(13397586990651591987448152302477847818401673058825434799550950352641746048968); // vk.K[294].Y
        mul_input[2] = input[293];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[294] * input[293]
        mul_input[0] = uint256(10852168845268022759849586256032411728963912106551832487403137949997024828561); // vk.K[295].X
        mul_input[1] = uint256(14703123947469051230251324920153634273506723902658288248176984577617632915715); // vk.K[295].Y
        mul_input[2] = input[294];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[295] * input[294]
        mul_input[0] = uint256(21026110890008627696125005470618732236458568617378727516756427448953317705306); // vk.K[296].X
        mul_input[1] = uint256(6986335426575914271737687717052941075462798718895737568903640632388741723391); // vk.K[296].Y
        mul_input[2] = input[295];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[296] * input[295]
        mul_input[0] = uint256(2873923242476962771642811528618308124704272384694413013132908373854770344450); // vk.K[297].X
        mul_input[1] = uint256(2260134290665645280800448617935503901655295645134992632771064572145536602652); // vk.K[297].Y
        mul_input[2] = input[296];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[297] * input[296]
        mul_input[0] = uint256(2588711660148636242075584228260735451271416339219124513840042751633790362299); // vk.K[298].X
        mul_input[1] = uint256(10728336680323094634186568052362392098018909059487870690523912098867004245031); // vk.K[298].Y
        mul_input[2] = input[297];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[298] * input[297]
        mul_input[0] = uint256(16519719774863188987011858040001770231946849965070675099891435236306517029261); // vk.K[299].X
        mul_input[1] = uint256(7274343027466062037873392017392687243593690641799646027194161014120157155843); // vk.K[299].Y
        mul_input[2] = input[298];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[299] * input[298]
        mul_input[0] = uint256(2954891825132497020066940620033377017398615717434283206227862994737522725092); // vk.K[300].X
        mul_input[1] = uint256(15366341421946401432169313936872264051612944877810265302105189443894042927409); // vk.K[300].Y
        mul_input[2] = input[299];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[300] * input[299]
        mul_input[0] = uint256(4484918708638910737516150912073948629266359134914344049654856968587222423936); // vk.K[301].X
        mul_input[1] = uint256(18351509245132611834637214861783355326704165006546875952248753252101202445927); // vk.K[301].Y
        mul_input[2] = input[300];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[301] * input[300]
        mul_input[0] = uint256(6356172335951843529665519199725960438070152667215041644332927015287068879674); // vk.K[302].X
        mul_input[1] = uint256(21226959914039977491372896358806344769699983469922972928756655557109788727532); // vk.K[302].Y
        mul_input[2] = input[301];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[302] * input[301]
        mul_input[0] = uint256(5910518500801827479814605305899891987087255621496680137056728681117813113830); // vk.K[303].X
        mul_input[1] = uint256(1308150446434284439946732855396588537270424355918127553414540832024470491363); // vk.K[303].Y
        mul_input[2] = input[302];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[303] * input[302]
        mul_input[0] = uint256(14754753690116196968252608651289414847405406515114360022144436692208723831566); // vk.K[304].X
        mul_input[1] = uint256(4760727082883254808406073157114684630815942435139304326541178568084743386906); // vk.K[304].Y
        mul_input[2] = input[303];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[304] * input[303]
        mul_input[0] = uint256(13228115896974867859493244174290298426742070409074892063468412529084705739339); // vk.K[305].X
        mul_input[1] = uint256(21662735615855677771671370224669128316558004960287791752358003471425259092959); // vk.K[305].Y
        mul_input[2] = input[304];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[305] * input[304]
        mul_input[0] = uint256(14993802670110756562206954193266237235486239008883880524665615763208641193994); // vk.K[306].X
        mul_input[1] = uint256(13431127720743105599294896116623204743769009055310852041924798808308035523746); // vk.K[306].Y
        mul_input[2] = input[305];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[306] * input[305]
        mul_input[0] = uint256(1426627441488371918751762618172522996716373232945787324737293910462774920401); // vk.K[307].X
        mul_input[1] = uint256(14219576759097606551721528841203761569283234906807020012928241205937339093365); // vk.K[307].Y
        mul_input[2] = input[306];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[307] * input[306]
        mul_input[0] = uint256(12854667012097446365401692631863465861376886241752137188406893342411252870123); // vk.K[308].X
        mul_input[1] = uint256(1938074961891990362907680900468267541195654206643415983196901480271158786896); // vk.K[308].Y
        mul_input[2] = input[307];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[308] * input[307]
        mul_input[0] = uint256(13507284464018484136771628700030676890508036012779726946345198419208378177035); // vk.K[309].X
        mul_input[1] = uint256(15216876447171123775004770107474848342241062112190528659853955896845211284190); // vk.K[309].Y
        mul_input[2] = input[308];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[309] * input[308]
        mul_input[0] = uint256(17899355663690896616751328417365089689878561429793364075293054242227357731892); // vk.K[310].X
        mul_input[1] = uint256(4007430189350323137208993202276299337260489627317034164993577065117819812003); // vk.K[310].Y
        mul_input[2] = input[309];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[310] * input[309]
        mul_input[0] = uint256(1495841169468031573064164222093933294868939043221730762221165491967668163624); // vk.K[311].X
        mul_input[1] = uint256(19706080094740115769591857731777740992277904768084702690032424489728511723520); // vk.K[311].Y
        mul_input[2] = input[310];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[311] * input[310]
        mul_input[0] = uint256(9925123244238661622239100975827109791239280497139279572183573946356615814586); // vk.K[312].X
        mul_input[1] = uint256(14966351202010764098402608015873863071162360599671199591172716405463194038028); // vk.K[312].Y
        mul_input[2] = input[311];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[312] * input[311]
        mul_input[0] = uint256(10867965461006545612277478152922500789476885821310250823216711334795112974644); // vk.K[313].X
        mul_input[1] = uint256(4032528326090178643465718202911226082135095081351151530443203981088355953195); // vk.K[313].Y
        mul_input[2] = input[312];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[313] * input[312]
        mul_input[0] = uint256(21180306022287751582333475475967808581787462593967577400921279406472046650777); // vk.K[314].X
        mul_input[1] = uint256(13110629354721387844244675497545010865265485270723394090341869158796822828940); // vk.K[314].Y
        mul_input[2] = input[313];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[314] * input[313]
        mul_input[0] = uint256(18801978954544534910711203773599134078928705707940681590455936048596999473826); // vk.K[315].X
        mul_input[1] = uint256(2556391750414970985654099999254134732379591513856877127746074605694607159440); // vk.K[315].Y
        mul_input[2] = input[314];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[315] * input[314]
        mul_input[0] = uint256(2143671439160792039041939539309957188622170429019083471194420285679827381836); // vk.K[316].X
        mul_input[1] = uint256(18394761616592361317479068474525856514790413889843788842549443906055849482341); // vk.K[316].Y
        mul_input[2] = input[315];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[316] * input[315]
        mul_input[0] = uint256(15498103341875198955647827410555774582810314237459228986916909188203985141785); // vk.K[317].X
        mul_input[1] = uint256(6475678869200476726503007390608211421990142771862559228343261745858231910622); // vk.K[317].Y
        mul_input[2] = input[316];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[317] * input[316]
        mul_input[0] = uint256(2870265996865877885792424005415751202506840643975940391495802139485204107044); // vk.K[318].X
        mul_input[1] = uint256(5295808364627827632363882355038216910654118874286428497486650578078030864365); // vk.K[318].Y
        mul_input[2] = input[317];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[318] * input[317]
        mul_input[0] = uint256(2736160884819249356345155376758262542183897226173639771850196851189838107350); // vk.K[319].X
        mul_input[1] = uint256(12713515526422643477783087605367634035926459068901399890693041082054696483216); // vk.K[319].Y
        mul_input[2] = input[318];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[319] * input[318]
        mul_input[0] = uint256(11848559967351670136755401336595226601878671940538845111387527191873712858316); // vk.K[320].X
        mul_input[1] = uint256(9813493034004010597883591288540648547852168423021879677336621538920767171980); // vk.K[320].Y
        mul_input[2] = input[319];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[320] * input[319]
        mul_input[0] = uint256(19627680332848254405038988905469705836959345222873882390044564347841429336359); // vk.K[321].X
        mul_input[1] = uint256(3725645695870069112715627911096116344815333523784366769546317069511141510145); // vk.K[321].Y
        mul_input[2] = input[320];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[321] * input[320]
        mul_input[0] = uint256(15151251279654839189723704117204619624697823472405640736109664547911374397106); // vk.K[322].X
        mul_input[1] = uint256(7262053659510608055397944850743793293680086941779052385048579776992451558963); // vk.K[322].Y
        mul_input[2] = input[321];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[322] * input[321]
        mul_input[0] = uint256(13245358861028654856846383999345365510906310118220327651704195930556227800720); // vk.K[323].X
        mul_input[1] = uint256(21490579475798769813513845699748708876135771999005323604674108755053924466564); // vk.K[323].Y
        mul_input[2] = input[322];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[323] * input[322]
        mul_input[0] = uint256(1993383723926391150061778853670002539942720940600312376787323543231908628258); // vk.K[324].X
        mul_input[1] = uint256(3243281606251856062580963695525145013033646828263540715054557759141113324502); // vk.K[324].Y
        mul_input[2] = input[323];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[324] * input[323]
        mul_input[0] = uint256(12079325292676468242739415915965571784808856775891956050769353238932379579828); // vk.K[325].X
        mul_input[1] = uint256(17246407143420028706553961610837214923092133146095932738372830111327286041865); // vk.K[325].Y
        mul_input[2] = input[324];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[325] * input[324]
        mul_input[0] = uint256(20577122038138739806342858062317221264040101936994120586605789889647174086415); // vk.K[326].X
        mul_input[1] = uint256(6574492918357726484896237601489847371584250460724817533365088379646134806277); // vk.K[326].Y
        mul_input[2] = input[325];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[326] * input[325]
        mul_input[0] = uint256(1693395861289314869160111228269171448884058941230816989578837635657168202450); // vk.K[327].X
        mul_input[1] = uint256(9986592714586556237654937860461793442823397179471589206707291177427273043845); // vk.K[327].Y
        mul_input[2] = input[326];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[327] * input[326]
        mul_input[0] = uint256(6851838472919461993255769087975575294593586063166061134231409188859443059486); // vk.K[328].X
        mul_input[1] = uint256(9221967491160265835827358961609717681961753140890299408200025261538837025567); // vk.K[328].Y
        mul_input[2] = input[327];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[328] * input[327]
        mul_input[0] = uint256(20805816878589150279743604986189252267952057449096935847803761724602822559598); // vk.K[329].X
        mul_input[1] = uint256(20878548013037763126816668862669706433544602159790545433472342790420847878879); // vk.K[329].Y
        mul_input[2] = input[328];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[329] * input[328]
        mul_input[0] = uint256(5604784179458474722063371892097489779234885517974619926949531788411621959047); // vk.K[330].X
        mul_input[1] = uint256(868377040781286694290700085107439531098108713140153607596814765843415414764); // vk.K[330].Y
        mul_input[2] = input[329];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[330] * input[329]
        mul_input[0] = uint256(14405922211368478192173608710565464392734875026996954047171704969222157923801); // vk.K[331].X
        mul_input[1] = uint256(14859824685396981763333354070718815176539092922626528091598741715146648304347); // vk.K[331].Y
        mul_input[2] = input[330];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[331] * input[330]
        mul_input[0] = uint256(5282460533150338537843135791943922990943864470150418977516172451804364978248); // vk.K[332].X
        mul_input[1] = uint256(4291558656278707094331355863205895516654936574845664732264016184408933170902); // vk.K[332].Y
        mul_input[2] = input[331];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[332] * input[331]
        mul_input[0] = uint256(12165419823976094809948632249251298870131705845863093499351545017703308246359); // vk.K[333].X
        mul_input[1] = uint256(836675576271320360155563839779916828473598722624305755542586419050225805687); // vk.K[333].Y
        mul_input[2] = input[332];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[333] * input[332]
        mul_input[0] = uint256(16777288889213809185356808262649477444319899259911668042846612120490932086870); // vk.K[334].X
        mul_input[1] = uint256(14895335208402228459571879813018664096226252395839297863024608489018232707621); // vk.K[334].Y
        mul_input[2] = input[333];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[334] * input[333]
        mul_input[0] = uint256(8939347719477474467712279043173544218858181048176151358399117540746515245081); // vk.K[335].X
        mul_input[1] = uint256(13929838736687276807656064758529488721357077292104924860509202188194279703504); // vk.K[335].Y
        mul_input[2] = input[334];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[335] * input[334]
        mul_input[0] = uint256(9789678268892906085858267264788984521669086286579302088511005512468967972003); // vk.K[336].X
        mul_input[1] = uint256(17487903416725628671564697824432166947690354400357643903090958347530188676155); // vk.K[336].Y
        mul_input[2] = input[335];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[336] * input[335]
        mul_input[0] = uint256(8982283571237106631973794745058813812261891278108454976361936774729354563683); // vk.K[337].X
        mul_input[1] = uint256(11798087630518161008297477526607994718502196078530719787150313311179427337362); // vk.K[337].Y
        mul_input[2] = input[336];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[337] * input[336]
        mul_input[0] = uint256(8451718970446925949899165469358074194529070982979909359523303456421601978248); // vk.K[338].X
        mul_input[1] = uint256(16626343515006860204083208896433184322850814491832779631863520176658673599097); // vk.K[338].Y
        mul_input[2] = input[337];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[338] * input[337]
        mul_input[0] = uint256(17713286100394385394307186518833010561246936816035169555398007405963601472106); // vk.K[339].X
        mul_input[1] = uint256(5224395336050831361630123149570314938960126641014962619307939065347694843695); // vk.K[339].Y
        mul_input[2] = input[338];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[339] * input[338]
        mul_input[0] = uint256(10407467969768108138582405309458353518498057389683120692619223886173254044517); // vk.K[340].X
        mul_input[1] = uint256(3492776947123029723159035379064719740154210902432796799733712868131519561531); // vk.K[340].Y
        mul_input[2] = input[339];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[340] * input[339]
        mul_input[0] = uint256(20742130053793224196394272406435366996434811889912280664225683954906947966909); // vk.K[341].X
        mul_input[1] = uint256(11734365242962033351506176930860637714226774687099789918950089818854362354187); // vk.K[341].Y
        mul_input[2] = input[340];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[341] * input[340]
        mul_input[0] = uint256(5264320234227545124491702384971535676834777104864693414619347997313466835417); // vk.K[342].X
        mul_input[1] = uint256(15327772482588134605615432744014024086311642218313857015478165595347274982265); // vk.K[342].Y
        mul_input[2] = input[341];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[342] * input[341]
        mul_input[0] = uint256(2984763385324474137047276126446567171326081509914275111426308413871199536034); // vk.K[343].X
        mul_input[1] = uint256(12067540376655939226732288877814219779503378404028906080511061353445270846508); // vk.K[343].Y
        mul_input[2] = input[342];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[343] * input[342]
        mul_input[0] = uint256(13107854498212327195906453053656841083581917703016586901701695071303849058298); // vk.K[344].X
        mul_input[1] = uint256(19602687565217937309136911315076305250443925082305151175156576101676902566627); // vk.K[344].Y
        mul_input[2] = input[343];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[344] * input[343]
        mul_input[0] = uint256(3889172584475723293910445604448004401119805264977971383714785263168886124672); // vk.K[345].X
        mul_input[1] = uint256(15459389628515572358994932148906832920897846568839325203361735036694122158922); // vk.K[345].Y
        mul_input[2] = input[344];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[345] * input[344]
        mul_input[0] = uint256(21390245066367647174127729805841548626309669664953926083523024450709629872449); // vk.K[346].X
        mul_input[1] = uint256(7422457604938665213675569371020927762891361880115590769768942817258315409996); // vk.K[346].Y
        mul_input[2] = input[345];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[346] * input[345]
        mul_input[0] = uint256(6696280122219408956642240374923177867404399713266345978206117291048966204527); // vk.K[347].X
        mul_input[1] = uint256(5798533329647720648102370972505219335778661197189226424041398348947044467043); // vk.K[347].Y
        mul_input[2] = input[346];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[347] * input[346]
        mul_input[0] = uint256(8141104386516960583199204945405511343726996571358929906409712309588695157510); // vk.K[348].X
        mul_input[1] = uint256(926685270747503471965676554234546023102820261148754918334850806970676287324); // vk.K[348].Y
        mul_input[2] = input[347];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[348] * input[347]
        mul_input[0] = uint256(14626846193723036844302550830802395239576961119693315684327702877069757285440); // vk.K[349].X
        mul_input[1] = uint256(3507303754127304176811903215859747801444269023615604721798612579366632783868); // vk.K[349].Y
        mul_input[2] = input[348];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[349] * input[348]
        mul_input[0] = uint256(14165339675990790208142500835969364886304319105355638838835966017665490027500); // vk.K[350].X
        mul_input[1] = uint256(20826234099661544275938079521358822715219808333361296017883734839197761237418); // vk.K[350].Y
        mul_input[2] = input[349];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[350] * input[349]
        mul_input[0] = uint256(1679850541197433664716688385195899551870044305650422310991276053789008866505); // vk.K[351].X
        mul_input[1] = uint256(4069969726141300204766454093978825466946216976179709218471615034568070869726); // vk.K[351].Y
        mul_input[2] = input[350];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[351] * input[350]
        mul_input[0] = uint256(3317418009096437755441758555223876717674856720737523311744089161034448414704); // vk.K[352].X
        mul_input[1] = uint256(21303761814552289539485778349909964083139267857243305367645922117072563325652); // vk.K[352].Y
        mul_input[2] = input[351];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[352] * input[351]
        mul_input[0] = uint256(3705274529399130271179627577278696260067938472502435362214336924480743554449); // vk.K[353].X
        mul_input[1] = uint256(11864493115917996308999895285656860551129377028945020778155041991622484817274); // vk.K[353].Y
        mul_input[2] = input[352];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[353] * input[352]
        mul_input[0] = uint256(4058241075131668616851527127845322377630274787324824805991430507231269401062); // vk.K[354].X
        mul_input[1] = uint256(1875666527729669044294009071953957871852915727258899957380299571739140539674); // vk.K[354].Y
        mul_input[2] = input[353];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[354] * input[353]
        mul_input[0] = uint256(5189756288745437102805576505471891243541099612367682399009197256510589297504); // vk.K[355].X
        mul_input[1] = uint256(2325519700023268675594763715028377305514590803100623304570379714531961222899); // vk.K[355].Y
        mul_input[2] = input[354];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[355] * input[354]
        mul_input[0] = uint256(18078889535958671936497766584443723670130377654790899986297127589669321098611); // vk.K[356].X
        mul_input[1] = uint256(21060682565181428277487353455086394375168924536203118405711140336446050040440); // vk.K[356].Y
        mul_input[2] = input[355];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[356] * input[355]
        mul_input[0] = uint256(3344018764332221188671078279866974390983077877650885602533622940780756211239); // vk.K[357].X
        mul_input[1] = uint256(9747557176341716554533187161241708996035544183515028472188268041579649099306); // vk.K[357].Y
        mul_input[2] = input[356];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[357] * input[356]
        mul_input[0] = uint256(11964286739435519174321843033139580391353025467367453444716383576291329190314); // vk.K[358].X
        mul_input[1] = uint256(367382929779285320622431522604619253518560119756403099102716423189540206223); // vk.K[358].Y
        mul_input[2] = input[357];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[358] * input[357]
        mul_input[0] = uint256(14127709229550420769616302323633171815771219019411434657409314455957934461375); // vk.K[359].X
        mul_input[1] = uint256(14467612288725911803735011741172963659333966567760139633298573359303365416411); // vk.K[359].Y
        mul_input[2] = input[358];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[359] * input[358]
        mul_input[0] = uint256(4527236897174314601493247200210479526898453455818593969208224930348515565469); // vk.K[360].X
        mul_input[1] = uint256(10409155289275002092073624136698494370947299122649032687685117258652213647703); // vk.K[360].Y
        mul_input[2] = input[359];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[360] * input[359]
        mul_input[0] = uint256(17618774476840423879380520792033110385163163586956713786381533756415667201343); // vk.K[361].X
        mul_input[1] = uint256(4536682924771255792224183890361393698313663829982382357229890110502256069760); // vk.K[361].Y
        mul_input[2] = input[360];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[361] * input[360]
        mul_input[0] = uint256(8229322248272977918426817449857512237733150017764196411984198176641806812031); // vk.K[362].X
        mul_input[1] = uint256(5688617166925254185581007928936264267355626799607115247743844925108807427819); // vk.K[362].Y
        mul_input[2] = input[361];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[362] * input[361]
        mul_input[0] = uint256(11598062787753997982604058325716434117070587941307732061951231826073902372984); // vk.K[363].X
        mul_input[1] = uint256(2951479066737678177476095786063567772153283409423544177389846602334358651772); // vk.K[363].Y
        mul_input[2] = input[362];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[363] * input[362]
        mul_input[0] = uint256(2809065635947670912809813263670040274405243997864457096332530980241780719508); // vk.K[364].X
        mul_input[1] = uint256(20493648413294609264052750045591789074804641654381698590583773254995088894582); // vk.K[364].Y
        mul_input[2] = input[363];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[364] * input[363]
        mul_input[0] = uint256(18348312657068922067436899965717015682931006255744925115842010964322617327506); // vk.K[365].X
        mul_input[1] = uint256(4232422278142166062459219111836045863985025649905556722645571107689356705930); // vk.K[365].Y
        mul_input[2] = input[364];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[365] * input[364]
        mul_input[0] = uint256(9717507522924000073516777676916011125786773827751612645666864982310835533786); // vk.K[366].X
        mul_input[1] = uint256(15875508758569743639176704173311672009862879924438706811664733710709240427280); // vk.K[366].Y
        mul_input[2] = input[365];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[366] * input[365]
        mul_input[0] = uint256(6066993396539118768618992454352180427428200422458546116974562492577408610538); // vk.K[367].X
        mul_input[1] = uint256(5581013034454383417516959609184236937809111384508084165960304436719740794020); // vk.K[367].Y
        mul_input[2] = input[366];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[367] * input[366]
        mul_input[0] = uint256(7412592349489050826315787691296841234998309672529344535020624182590828174643); // vk.K[368].X
        mul_input[1] = uint256(11266808302285621159587488974896937965242169367606484944062042929893833036512); // vk.K[368].Y
        mul_input[2] = input[367];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[368] * input[367]
        mul_input[0] = uint256(20203299948665116424381741914492532277200023616874585434110851775300849547080); // vk.K[369].X
        mul_input[1] = uint256(6874463082341309748991559865831916620681745325200785350955387728158155920925); // vk.K[369].Y
        mul_input[2] = input[368];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[369] * input[368]
        mul_input[0] = uint256(9968848837195555615929306778154127911849951586080729605451648287078898427843); // vk.K[370].X
        mul_input[1] = uint256(12970391373829181542408486329049320633205431629645790817884167742669905908485); // vk.K[370].Y
        mul_input[2] = input[369];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[370] * input[369]
        mul_input[0] = uint256(21377463462757373247872702997568910730208749132296865224734247820051254901975); // vk.K[371].X
        mul_input[1] = uint256(931710327168141389319218335190492882364716720498968667129395916484452852839); // vk.K[371].Y
        mul_input[2] = input[370];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[371] * input[370]
        mul_input[0] = uint256(2964127110158686952824155364584031534279851089595445738909870482205169877013); // vk.K[372].X
        mul_input[1] = uint256(20387177070883739369188687370980095919290910240231722653072647246986937772281); // vk.K[372].Y
        mul_input[2] = input[371];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[372] * input[371]
        mul_input[0] = uint256(4502614893647463329886279743718423830965673418445939257709539155990173149845); // vk.K[373].X
        mul_input[1] = uint256(18507877348278899268807236213430436449058219712983733179884570834753241739198); // vk.K[373].Y
        mul_input[2] = input[372];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[373] * input[372]
        mul_input[0] = uint256(8386731292649969549803916879611470128389609740683165454749976767330727154623); // vk.K[374].X
        mul_input[1] = uint256(11216789546781549615112357883294132628866216244823987535387901899778843045359); // vk.K[374].Y
        mul_input[2] = input[373];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[374] * input[373]
        mul_input[0] = uint256(15365780037586421204732389455629536907229418350372257489173249308804241129382); // vk.K[375].X
        mul_input[1] = uint256(21765530734027357990342231885274523612717345240151166490025347856340896036068); // vk.K[375].Y
        mul_input[2] = input[374];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[375] * input[374]
        mul_input[0] = uint256(17836017244882856679823763513832093818314585534466573009555707376735357519929); // vk.K[376].X
        mul_input[1] = uint256(4872734637422012440912960464328956436322308203962903591945940333649654307555); // vk.K[376].Y
        mul_input[2] = input[375];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[376] * input[375]
        mul_input[0] = uint256(7863804932122913035029130323607408499204253690908545731372462493463815012618); // vk.K[377].X
        mul_input[1] = uint256(11261421729754932788282879000507449083443402042457603208139009554037492641859); // vk.K[377].Y
        mul_input[2] = input[376];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[377] * input[376]
        mul_input[0] = uint256(21655161262945324383597974753511201811958212894255543455389437441824102311021); // vk.K[378].X
        mul_input[1] = uint256(9647486393098898917079338998079979594525023149711507529889066334663496954492); // vk.K[378].Y
        mul_input[2] = input[377];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[378] * input[377]
        mul_input[0] = uint256(10745619966974313428111150155301966510755621323988818744675842496464680929479); // vk.K[379].X
        mul_input[1] = uint256(19946230167534178854131271080229968016875953846715042766404090502766916237637); // vk.K[379].Y
        mul_input[2] = input[378];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[379] * input[378]
        mul_input[0] = uint256(12145636945364351846181293091943753331121094258620628360757893688217181253689); // vk.K[380].X
        mul_input[1] = uint256(575472566767878975238139831126020182804831183148351747288489351513039937597); // vk.K[380].Y
        mul_input[2] = input[379];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[380] * input[379]
        mul_input[0] = uint256(16464427931181061912630556577717018120149381273131711445642569560908159016120); // vk.K[381].X
        mul_input[1] = uint256(18953768917678187215962161748820422017659860565089891797817303949297404180985); // vk.K[381].Y
        mul_input[2] = input[380];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[381] * input[380]
        mul_input[0] = uint256(3798117168551522118767627119468605839078046899951871634967081926882884619563); // vk.K[382].X
        mul_input[1] = uint256(7768623811993104075443359837299553007885343619423293456854551879363890313609); // vk.K[382].Y
        mul_input[2] = input[381];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[382] * input[381]
        mul_input[0] = uint256(19903964701213972213963467387568350319775030911736885243708469285541912958376); // vk.K[383].X
        mul_input[1] = uint256(15577721999166208425434702006238865219583052342694822016763998989899042258008); // vk.K[383].Y
        mul_input[2] = input[382];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[383] * input[382]
        mul_input[0] = uint256(1059780184200016061669869535346191258193841566501273103688235205663481182106); // vk.K[384].X
        mul_input[1] = uint256(10871051929848947815551805310774038382785112870052854849015988207402216685333); // vk.K[384].Y
        mul_input[2] = input[383];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[384] * input[383]
        mul_input[0] = uint256(20418467943969802880153970580153658850258980906612439573566721719540966815496); // vk.K[385].X
        mul_input[1] = uint256(21500174782297997428956009776588677579637425751892690358084703728145244146651); // vk.K[385].Y
        mul_input[2] = input[384];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[385] * input[384]
        mul_input[0] = uint256(20480236750726739893025257875685875041072405614840990415387063207704321592296); // vk.K[386].X
        mul_input[1] = uint256(17248325011218101154114526905082038958299337685607299922928921824630143109296); // vk.K[386].Y
        mul_input[2] = input[385];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[386] * input[385]
        mul_input[0] = uint256(20787659938505479389220696747237589637402787865703191250692654280009280057268); // vk.K[387].X
        mul_input[1] = uint256(8043228832416799882966173660595392832144668275264198867689691288499426227740); // vk.K[387].Y
        mul_input[2] = input[386];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[387] * input[386]
        mul_input[0] = uint256(20798346461477240260031279970451081668715323652575576127422793509660694519179); // vk.K[388].X
        mul_input[1] = uint256(16428378850169664251346876118774531266303395293089655701912634974912513217571); // vk.K[388].Y
        mul_input[2] = input[387];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[388] * input[387]
        mul_input[0] = uint256(5141775531175227034628282957423002239190833089521389824108808618238892487745); // vk.K[389].X
        mul_input[1] = uint256(13178071677477959937789526974330751910084653549880360232028351378616901587382); // vk.K[389].Y
        mul_input[2] = input[388];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[389] * input[388]
        mul_input[0] = uint256(9062787398759409606510517909333973776303614058748771323198415988748647010889); // vk.K[390].X
        mul_input[1] = uint256(11734244599027756119307321600786996768860996856045974724913754351244598415860); // vk.K[390].Y
        mul_input[2] = input[389];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[390] * input[389]
        mul_input[0] = uint256(19025752790367356865548876615519913017586238370678630412677641272442603923776); // vk.K[391].X
        mul_input[1] = uint256(17073395579755174181053826399389517627304018089509810359592448870895911119580); // vk.K[391].Y
        mul_input[2] = input[390];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[391] * input[390]
        mul_input[0] = uint256(15105101840502695573329248872925021078157269688885808467349847191407621100426); // vk.K[392].X
        mul_input[1] = uint256(12862679543134807072308915502025504936661675591595796085067402234455195297369); // vk.K[392].Y
        mul_input[2] = input[391];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[392] * input[391]
        mul_input[0] = uint256(20427553893249932090653675255021928722370564829754307670329831939192395842718); // vk.K[393].X
        mul_input[1] = uint256(20461762937906654300658652125006095129678237064036482963488155322028596550109); // vk.K[393].Y
        mul_input[2] = input[392];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[393] * input[392]
        mul_input[0] = uint256(14851850207140867521651198338656725498562967092967933071249994688309964487513); // vk.K[394].X
        mul_input[1] = uint256(11373882375418930255670494722836983323089013888444159989481381647874047112740); // vk.K[394].Y
        mul_input[2] = input[393];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[394] * input[393]
        mul_input[0] = uint256(19625304831684285153267413861309712562060395881234968122157491486255232746536); // vk.K[395].X
        mul_input[1] = uint256(18799083389897537995760121176950468727481406338297935751704007060533894290309); // vk.K[395].Y
        mul_input[2] = input[394];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[395] * input[394]
        mul_input[0] = uint256(20275441210064036699990183754024520634765485074543573654357935166982355094880); // vk.K[396].X
        mul_input[1] = uint256(9019383069979565270165696951262179931404367615446343417194798927931969026677); // vk.K[396].Y
        mul_input[2] = input[395];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[396] * input[395]
        mul_input[0] = uint256(8973154410527517121370216534982585938399193333161126584649401909432062845503); // vk.K[397].X
        mul_input[1] = uint256(14308952036740269968703884266506755402916651758683138238003181116657405444576); // vk.K[397].Y
        mul_input[2] = input[396];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[397] * input[396]
        mul_input[0] = uint256(8041486112254821349724316805804141360881813518002752512034875975284978603083); // vk.K[398].X
        mul_input[1] = uint256(4778356807153248784358496325219071477115118092731020469407055967923563046109); // vk.K[398].Y
        mul_input[2] = input[397];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[398] * input[397]
        mul_input[0] = uint256(10325825583294388576932409276747350613226360387005573777557989303570060008905); // vk.K[399].X
        mul_input[1] = uint256(2160892049642863104765166313035932907607180296216453563066943265820707583162); // vk.K[399].Y
        mul_input[2] = input[398];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[399] * input[398]
        mul_input[0] = uint256(15967956101353407809316348103762486124515323900852537714411731066451691541521); // vk.K[400].X
        mul_input[1] = uint256(1309148833007966875361565684019435302760989655034599456717328208393922868717); // vk.K[400].Y
        mul_input[2] = input[399];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[400] * input[399]
        mul_input[0] = uint256(1409087514916646240283453004590755257405839212801423398982458944591724062679); // vk.K[401].X
        mul_input[1] = uint256(794565622463784660150786834332509689144146278651025814349665070707643125831); // vk.K[401].Y
        mul_input[2] = input[400];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[401] * input[400]
        mul_input[0] = uint256(21795641309959799652085867094398882697064300269844410326586404555157898306508); // vk.K[402].X
        mul_input[1] = uint256(3565460083416439922598835690973710748466274511236424725572820959676821044854); // vk.K[402].Y
        mul_input[2] = input[401];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[402] * input[401]
        mul_input[0] = uint256(2534199906327809229185452562507522710656600218992760965488152567741019991217); // vk.K[403].X
        mul_input[1] = uint256(1071814066167617099185023098788491611112035518936632207862917876795668742224); // vk.K[403].Y
        mul_input[2] = input[402];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[403] * input[402]
        mul_input[0] = uint256(13478538778274144560778342747091871363107018849460661313345967044633514508501); // vk.K[404].X
        mul_input[1] = uint256(7717327729968781205181852262974431044696916997040414505945743347688285051995); // vk.K[404].Y
        mul_input[2] = input[403];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[404] * input[403]
        mul_input[0] = uint256(7355142784430052311666644818210281241136466564502375600440740230039194692148); // vk.K[405].X
        mul_input[1] = uint256(9807306107546893696624380292929132722287376240776840414284122505979216288301); // vk.K[405].Y
        mul_input[2] = input[404];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[405] * input[404]
        mul_input[0] = uint256(18055027576513008726975248993081831602371951251262790033560654226064843322208); // vk.K[406].X
        mul_input[1] = uint256(13626903455374172578026102380151271241500923004798139856021496872771078015186); // vk.K[406].Y
        mul_input[2] = input[405];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[406] * input[405]
        mul_input[0] = uint256(1662846406101634577488557522371907801403180670737303635086072509787263286255); // vk.K[407].X
        mul_input[1] = uint256(15087349378546801849341129210483040445675482561094017688129864937591804130957); // vk.K[407].Y
        mul_input[2] = input[406];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[407] * input[406]
        mul_input[0] = uint256(19351015586632614077916933108008765818902072748708597914817611960302621046453); // vk.K[408].X
        mul_input[1] = uint256(1743809293683893124445105388124830714184614572188040673944881119653757200831); // vk.K[408].Y
        mul_input[2] = input[407];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[408] * input[407]
        mul_input[0] = uint256(12414395354758162883986543186365112481442298867401765524803725808831982063844); // vk.K[409].X
        mul_input[1] = uint256(6615804590705498286639863117594653997082164704889956469089411258479785278243); // vk.K[409].Y
        mul_input[2] = input[408];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[409] * input[408]
        mul_input[0] = uint256(10034488012382613149787289287373998457082317053717339895560943730314767829104); // vk.K[410].X
        mul_input[1] = uint256(5610897192798913038094087779673111242002506756986137733526557066843786061946); // vk.K[410].Y
        mul_input[2] = input[409];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[410] * input[409]
        mul_input[0] = uint256(20203167826366590837102898722505000747951264248760879061384139491906396868827); // vk.K[411].X
        mul_input[1] = uint256(17425717081537076933405900529041858344478211878046036955667750951736499936157); // vk.K[411].Y
        mul_input[2] = input[410];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[411] * input[410]
        mul_input[0] = uint256(9070717886827500185779836494940336960562038674758038514081456423894811941726); // vk.K[412].X
        mul_input[1] = uint256(5309542551334926919054839319033048013471895439978928605097614899770113719502); // vk.K[412].Y
        mul_input[2] = input[411];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[412] * input[411]
        mul_input[0] = uint256(10463421165561651918368139056419835529562551701269618346347404231726833337401); // vk.K[413].X
        mul_input[1] = uint256(2054136672493580523307425697959064696754756437517675736392688939571062539037); // vk.K[413].Y
        mul_input[2] = input[412];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[413] * input[412]
        mul_input[0] = uint256(20485244700068439241350598894511527780494370604261399234006104079063654035479); // vk.K[414].X
        mul_input[1] = uint256(13117032413819793813816062202416599120766195683843787939698256817212251808033); // vk.K[414].Y
        mul_input[2] = input[413];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[414] * input[413]
        mul_input[0] = uint256(3409256842159953623785509830670848095970544427740267277777856210312902194130); // vk.K[415].X
        mul_input[1] = uint256(16040652061461832061935094398619810039519484606752488036772906957902714186263); // vk.K[415].Y
        mul_input[2] = input[414];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[415] * input[414]
        mul_input[0] = uint256(21497566755212178836794235937349027628932301370769447557532818710064764856376); // vk.K[416].X
        mul_input[1] = uint256(6840215288021275265921482964069133763604858374663645289877683581837458070131); // vk.K[416].Y
        mul_input[2] = input[415];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[416] * input[415]
        mul_input[0] = uint256(156919644349323569946207477499617572123690109123116062854832609489982088256); // vk.K[417].X
        mul_input[1] = uint256(3165755270521255408761515359778572453447611065143766705004028991983156129438); // vk.K[417].Y
        mul_input[2] = input[416];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[417] * input[416]
        mul_input[0] = uint256(14407852564699083626442989797131649834266006286364370283332376613378493236162); // vk.K[418].X
        mul_input[1] = uint256(8369279706403917179511522682104074050347707582697094444823398223948610025944); // vk.K[418].Y
        mul_input[2] = input[417];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[418] * input[417]
        mul_input[0] = uint256(3783212913344082849589639750688199843756625780242718649515723864224613829885); // vk.K[419].X
        mul_input[1] = uint256(3182030658580795561952028115591884128075123275017996297013777058695018861750); // vk.K[419].Y
        mul_input[2] = input[418];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[419] * input[418]
        mul_input[0] = uint256(16334246512846114295821970511532218943771635639782051080138476088417609629166); // vk.K[420].X
        mul_input[1] = uint256(18001130812956802630530876986117934929203492290519439575161342994151793475885); // vk.K[420].Y
        mul_input[2] = input[419];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[420] * input[419]
        mul_input[0] = uint256(21089634315937536177010209834439572397987184583348320068454910682808505122321); // vk.K[421].X
        mul_input[1] = uint256(20659087965533453271816976196642298517020935813585406354493933327768770965370); // vk.K[421].Y
        mul_input[2] = input[420];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[421] * input[420]
        mul_input[0] = uint256(10024763708136459091484106364528976411888369363040672875196675201793759303431); // vk.K[422].X
        mul_input[1] = uint256(10889409318643410655898182092051462181458371081238111714570517242890529590877); // vk.K[422].Y
        mul_input[2] = input[421];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[422] * input[421]
        mul_input[0] = uint256(7035173338314254324824249005455212662835643376960522502222615313195016149249); // vk.K[423].X
        mul_input[1] = uint256(8816393151341635561274935956039962754850568199333972564069542878973868962398); // vk.K[423].Y
        mul_input[2] = input[422];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[423] * input[422]
        mul_input[0] = uint256(13245592353207899326926177196416217159085345247077081610815441375129085478719); // vk.K[424].X
        mul_input[1] = uint256(3659289359619805171479944466490461675664178547011045893550287579915105820634); // vk.K[424].Y
        mul_input[2] = input[423];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[424] * input[423]
        mul_input[0] = uint256(80042258384459317052890619907572930887250560078256281167849099947076387154); // vk.K[425].X
        mul_input[1] = uint256(10854556291072627533484778095481592884029558912706439664951178371023124128308); // vk.K[425].Y
        mul_input[2] = input[424];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[425] * input[424]
        mul_input[0] = uint256(6548337327782494570505133730615797405975300995376962485320518553602542797668); // vk.K[426].X
        mul_input[1] = uint256(6308711587601977504883492876382326186496680168754865426225965478692361341952); // vk.K[426].Y
        mul_input[2] = input[425];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[426] * input[425]
        mul_input[0] = uint256(1510805818646252364317770241299645578370159012577087338201117090896678926720); // vk.K[427].X
        mul_input[1] = uint256(15688728773003942465685217661995130931180115727382134144259172295162170532634); // vk.K[427].Y
        mul_input[2] = input[426];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[427] * input[426]
        mul_input[0] = uint256(13777712659023547815710803805212455854644344902195625111941448801879515486789); // vk.K[428].X
        mul_input[1] = uint256(9786819671957024456142829385763022718159812900945734763098357128636329945380); // vk.K[428].Y
        mul_input[2] = input[427];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[428] * input[427]
        mul_input[0] = uint256(13699869478993711313812975876799419582754247905584777882726387640244830751408); // vk.K[429].X
        mul_input[1] = uint256(15725755776968757137107085956761441697896362513115293018242400033063573235112); // vk.K[429].Y
        mul_input[2] = input[428];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[429] * input[428]
        mul_input[0] = uint256(3845300349479164071061733661159239400659794654824235727593033142378153312467); // vk.K[430].X
        mul_input[1] = uint256(15779945798656153555377030833113557783659053852342332824084313915253818191052); // vk.K[430].Y
        mul_input[2] = input[429];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[430] * input[429]
        mul_input[0] = uint256(19969071003728247469311198793781741359242710862586255339192816663778106265071); // vk.K[431].X
        mul_input[1] = uint256(11129878020252914795787302155351676402035830594529718879444766886059720575039); // vk.K[431].Y
        mul_input[2] = input[430];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[431] * input[430]
        mul_input[0] = uint256(9167201885656267372324850106235263789103066764027910275907956280790573553734); // vk.K[432].X
        mul_input[1] = uint256(12351426325946440201384665743192466864059587824220188703715921644278153548270); // vk.K[432].Y
        mul_input[2] = input[431];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[432] * input[431]
        mul_input[0] = uint256(20897498395816692742640376298899306481729522686051958718184955930927535618315); // vk.K[433].X
        mul_input[1] = uint256(10027029363591294214541676374015521976246720895357444579179561250906109276823); // vk.K[433].Y
        mul_input[2] = input[432];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[433] * input[432]
        mul_input[0] = uint256(20943022047095804749528983449330422028437410427172303544534304210097855010573); // vk.K[434].X
        mul_input[1] = uint256(1721215304603118982515397137458280415058286719089838131918044937887465059344); // vk.K[434].Y
        mul_input[2] = input[433];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[434] * input[433]
        mul_input[0] = uint256(21141268745229595365685104234846372825049781478090165414949954113003651077280); // vk.K[435].X
        mul_input[1] = uint256(10154111665269866047631033745596227901774576098332642516766711026660460536261); // vk.K[435].Y
        mul_input[2] = input[434];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[435] * input[434]
        mul_input[0] = uint256(9426286668497156403806693660799075595734427201908268832600950426391223831060); // vk.K[436].X
        mul_input[1] = uint256(1609331945277316375538743150903249515517195513791553347035659238179285147083); // vk.K[436].Y
        mul_input[2] = input[435];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[436] * input[435]
        mul_input[0] = uint256(19751866445656353361070650482812605825114397104216453116651263524671289718715); // vk.K[437].X
        mul_input[1] = uint256(21026982735296006292362127435500283125835384470866405261342367564590480618435); // vk.K[437].Y
        mul_input[2] = input[436];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[437] * input[436]
        mul_input[0] = uint256(20425427458781734201873552958142323267433024457862579651335017863626123076680); // vk.K[438].X
        mul_input[1] = uint256(14284341275442499315574535085912034183724224404858668129721196245584514437496); // vk.K[438].Y
        mul_input[2] = input[437];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[438] * input[437]
        mul_input[0] = uint256(2167381040752735695324657713318602148703184199298914093994890382316719324900); // vk.K[439].X
        mul_input[1] = uint256(4463660686866072333996955063458685429680241847402371503284044239971003260123); // vk.K[439].Y
        mul_input[2] = input[438];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[439] * input[438]
        mul_input[0] = uint256(9269194299114678761368754869690182854216860457804621370288190625665497293736); // vk.K[440].X
        mul_input[1] = uint256(16447949349539209631198682862481577133668322156070843362744769470810289674016); // vk.K[440].Y
        mul_input[2] = input[439];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[440] * input[439]
        mul_input[0] = uint256(11979802519360322240942306712861010667652728441266660545176049447928767364506); // vk.K[441].X
        mul_input[1] = uint256(16547524961646398056709416279472722004734212938927734067471504300614104895174); // vk.K[441].Y
        mul_input[2] = input[440];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[441] * input[440]
        mul_input[0] = uint256(20882691908470841210402971616682945622836081244564099141226885788256468459193); // vk.K[442].X
        mul_input[1] = uint256(3018767006893254845937976283431295776481848776573929036359934062403894279052); // vk.K[442].Y
        mul_input[2] = input[441];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[442] * input[441]
        mul_input[0] = uint256(5640631351061640563018806298413582210853648240655360861089017834712647605445); // vk.K[443].X
        mul_input[1] = uint256(1257897353608686398852430457146659325795539628224886794499162331523358435988); // vk.K[443].Y
        mul_input[2] = input[442];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[443] * input[442]
        mul_input[0] = uint256(6675679827030710859341074844688416526814631891828654054938744130823695582426); // vk.K[444].X
        mul_input[1] = uint256(1463858569223519883926181795071970000181194719772594381070964580992229817833); // vk.K[444].Y
        mul_input[2] = input[443];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[444] * input[443]
        mul_input[0] = uint256(14197251211672470834736213707553908667920974540958309880429346414782409507981); // vk.K[445].X
        mul_input[1] = uint256(12104134824761604760989940284226086532411506954430349062262552268557063009373); // vk.K[445].Y
        mul_input[2] = input[444];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[445] * input[444]
        mul_input[0] = uint256(16049007411974787399751449526189567296101954541877758813417786406065836669615); // vk.K[446].X
        mul_input[1] = uint256(18622754381103061580939900580066173018313492296223358004375938926696703741832); // vk.K[446].Y
        mul_input[2] = input[445];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[446] * input[445]
        mul_input[0] = uint256(20628447420753775529037635812240359543954448814349174629813273803101160428980); // vk.K[447].X
        mul_input[1] = uint256(4597886265846537153800461556022021848168524105304010597406138146817148385263); // vk.K[447].Y
        mul_input[2] = input[446];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[447] * input[446]
        mul_input[0] = uint256(10009575982988690637996364023345732361936426433906464165916827219093308885612); // vk.K[448].X
        mul_input[1] = uint256(21412668111813131504821917698327101728772789064651017006005634006614050673631); // vk.K[448].Y
        mul_input[2] = input[447];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[448] * input[447]
        mul_input[0] = uint256(4234784277240341898806433431242099324021029140381230506954510462403929877250); // vk.K[449].X
        mul_input[1] = uint256(2289873953969376683381178651830385950729504279784030792907623224934037493065); // vk.K[449].Y
        mul_input[2] = input[448];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[449] * input[448]
        mul_input[0] = uint256(7051059262101415930525379319802057510457305795392961058914867800216279364762); // vk.K[450].X
        mul_input[1] = uint256(7240707685406391690845379028434057484824728397722759117698033017469218700769); // vk.K[450].Y
        mul_input[2] = input[449];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[450] * input[449]
        mul_input[0] = uint256(16293823673271135682208541849686924578978539314880266578651333866630831867456); // vk.K[451].X
        mul_input[1] = uint256(14653174646450097193068230607853331596377969375170601164082744267649199168376); // vk.K[451].Y
        mul_input[2] = input[450];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[451] * input[450]
        mul_input[0] = uint256(18523441824445439705569658129489853733609504597306274069045891354290387078751); // vk.K[452].X
        mul_input[1] = uint256(12068519355438279283044849620123498255230157607643759059991055678459421530891); // vk.K[452].Y
        mul_input[2] = input[451];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[452] * input[451]
        mul_input[0] = uint256(21360564642875078527057068468071262465278822249774570820492807093031036222351); // vk.K[453].X
        mul_input[1] = uint256(3257675809467801588302022527078186286463714923662148980980069617160180375847); // vk.K[453].Y
        mul_input[2] = input[452];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[453] * input[452]
        mul_input[0] = uint256(4300817729766820221974671736850253151269513547572375462891457724324957658054); // vk.K[454].X
        mul_input[1] = uint256(11327025515103224766138046329437748844171862924065740660378966454349203272647); // vk.K[454].Y
        mul_input[2] = input[453];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[454] * input[453]
        mul_input[0] = uint256(19418915201315952040391786365853507868725431720275942098489003444612887589035); // vk.K[455].X
        mul_input[1] = uint256(19337608335266075372799856773552147854819473092645361309901680916952962556588); // vk.K[455].Y
        mul_input[2] = input[454];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[455] * input[454]
        mul_input[0] = uint256(859007960520640702528542311745996554209092574481993751189397642933722737257); // vk.K[456].X
        mul_input[1] = uint256(20157866617033327975082478727653857089846180416060273126375941745873172789990); // vk.K[456].Y
        mul_input[2] = input[455];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[456] * input[455]
        mul_input[0] = uint256(8945541264289082376908876826597172705754701175571287086869550863367776885464); // vk.K[457].X
        mul_input[1] = uint256(5827843478358109609193658005986974841531382489529528378463903909923821349035); // vk.K[457].Y
        mul_input[2] = input[456];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[457] * input[456]
        mul_input[0] = uint256(14498153458229513503674006302569304034718807316950865037816393004701482826950); // vk.K[458].X
        mul_input[1] = uint256(16137372144523340265630549712804493742991045094902064771743309581926821006596); // vk.K[458].Y
        mul_input[2] = input[457];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[458] * input[457]
        mul_input[0] = uint256(12807899507424466481144693811060920348187512666524867765113775358381217406240); // vk.K[459].X
        mul_input[1] = uint256(6908478211090103584888396788414742964650048909742678161364212151170378306951); // vk.K[459].Y
        mul_input[2] = input[458];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[459] * input[458]
        mul_input[0] = uint256(20136531128101830211077416114778962692310425707180903361209635620900895386558); // vk.K[460].X
        mul_input[1] = uint256(21556723966558357048827582004579046193905881064917774233372659879433913987877); // vk.K[460].Y
        mul_input[2] = input[459];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[460] * input[459]
        mul_input[0] = uint256(18620207671513661815104135047455078628167295585623837527257708684522020976571); // vk.K[461].X
        mul_input[1] = uint256(11807303815535963615145764066365431092225534926089468574282526236647331327610); // vk.K[461].Y
        mul_input[2] = input[460];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[461] * input[460]
        mul_input[0] = uint256(16062606394241394578586221696200367488905553691308533494073579950478360661178); // vk.K[462].X
        mul_input[1] = uint256(902021086478553444734552843243628296115602978115534741596661383812531375501); // vk.K[462].Y
        mul_input[2] = input[461];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[462] * input[461]
        mul_input[0] = uint256(16865837705129739211976758614719517626372128488441599629547287769417905550834); // vk.K[463].X
        mul_input[1] = uint256(3698715228969145338345141514346321471601933740349838491906930181109516819255); // vk.K[463].Y
        mul_input[2] = input[462];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[463] * input[462]
        mul_input[0] = uint256(1510956131058246474262467552803737168237759566735648453963874850153769244856); // vk.K[464].X
        mul_input[1] = uint256(2033430880913575119668903087292016893652231159547227070374178810786045851016); // vk.K[464].Y
        mul_input[2] = input[463];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[464] * input[463]
        mul_input[0] = uint256(14345385548444610879763585441190254991326178531780708274611867322302069425088); // vk.K[465].X
        mul_input[1] = uint256(21093492988254551986435128439411854490248866707271050485148160854682088781069); // vk.K[465].Y
        mul_input[2] = input[464];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[465] * input[464]
        mul_input[0] = uint256(20208059371192417026618599238262525201775850331033787026975352983839260954081); // vk.K[466].X
        mul_input[1] = uint256(864076757668317467849323313769780312248863119313835064196275194942514440597); // vk.K[466].Y
        mul_input[2] = input[465];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[466] * input[465]
        mul_input[0] = uint256(16481611444010072080885745233770759132264105623983795466752419887677264565281); // vk.K[467].X
        mul_input[1] = uint256(15160476121715059898614231563201354921724427880011730381436823610994526534983); // vk.K[467].Y
        mul_input[2] = input[466];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[467] * input[466]
        mul_input[0] = uint256(16184670196641089759817352724667488505261020140412007619127795169207887513128); // vk.K[468].X
        mul_input[1] = uint256(2077831231740775471555430594961146790061795087616460630222001940821737266118); // vk.K[468].Y
        mul_input[2] = input[467];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[468] * input[467]
        mul_input[0] = uint256(18093317796550652777607796899502686794570379517586163888589534363517459722886); // vk.K[469].X
        mul_input[1] = uint256(6158807145896905298935680360277557396586024448349925202691602962127078351353); // vk.K[469].Y
        mul_input[2] = input[468];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[469] * input[468]
        mul_input[0] = uint256(6999337747708414386084347867130726007897312975921151679228019016523538632166); // vk.K[470].X
        mul_input[1] = uint256(10431952999382895125951903384583990169334215395731205648148846555805438183053); // vk.K[470].Y
        mul_input[2] = input[469];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[470] * input[469]
        mul_input[0] = uint256(16033447396158990232889425021389569566596755570712955255223620581643413450312); // vk.K[471].X
        mul_input[1] = uint256(11672504117148035976189145268170347151936282667758068522687131526341531681113); // vk.K[471].Y
        mul_input[2] = input[470];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[471] * input[470]
        mul_input[0] = uint256(1762590581046480510494654718981353074692811622559326195236663884484075405439); // vk.K[472].X
        mul_input[1] = uint256(16841559770334462623587665080148719462973961293569344362613559295511131032971); // vk.K[472].Y
        mul_input[2] = input[471];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[472] * input[471]
        mul_input[0] = uint256(21713342517898876134561871119083050242273551906851039865744347714630495289146); // vk.K[473].X
        mul_input[1] = uint256(2312422024179396166880531129033117615501195183492704545716223642762694409464); // vk.K[473].Y
        mul_input[2] = input[472];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[473] * input[472]
        mul_input[0] = uint256(11740019260803944408541881449796620576976837038099677265369860948988805282318); // vk.K[474].X
        mul_input[1] = uint256(1986405460863747901474007431716810176932555112104762473154083519617547781389); // vk.K[474].Y
        mul_input[2] = input[473];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[474] * input[473]
        mul_input[0] = uint256(7346196002972773375174697551654337291440264106304571882313736551612083603315); // vk.K[475].X
        mul_input[1] = uint256(13804919362529126656023538990571860439553607702222606171848341512296244058785); // vk.K[475].Y
        mul_input[2] = input[474];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[475] * input[474]
        mul_input[0] = uint256(2681333457529678979399368568364509329032817962763573493232336776787755883079); // vk.K[476].X
        mul_input[1] = uint256(15087410876670431887419629559501280928480003338531008925315634122046445102383); // vk.K[476].Y
        mul_input[2] = input[475];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[476] * input[475]
        mul_input[0] = uint256(3541974643376314932972869107499775022229577727393079503746660012141880594065); // vk.K[477].X
        mul_input[1] = uint256(16008281182304656342676404099667639237297065490875037099567388386806402270943); // vk.K[477].Y
        mul_input[2] = input[476];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[477] * input[476]
        mul_input[0] = uint256(13497361231273821906710083665631440904442657094528409001232987339941829960202); // vk.K[478].X
        mul_input[1] = uint256(6875859220209658808829988526226536022788600544230177557292514293166666930437); // vk.K[478].Y
        mul_input[2] = input[477];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[478] * input[477]
        mul_input[0] = uint256(10891433213919014038978385958070433213706445588220046552955278172091590499565); // vk.K[479].X
        mul_input[1] = uint256(13233591250999054284220333475534997136094960691110004200787664452313948534916); // vk.K[479].Y
        mul_input[2] = input[478];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[479] * input[478]
        mul_input[0] = uint256(4929687190179930273845562763012997643287106473090474414784390484940060466912); // vk.K[480].X
        mul_input[1] = uint256(15052102186683158947475209953833741362236954620897474418615383055644380908385); // vk.K[480].Y
        mul_input[2] = input[479];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[480] * input[479]
        mul_input[0] = uint256(10521115674092725720392562233855520678818829243844237961388694224157989933248); // vk.K[481].X
        mul_input[1] = uint256(5026648517733640656537958430485742400026272217923726791750123251543837611466); // vk.K[481].Y
        mul_input[2] = input[480];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[481] * input[480]
        mul_input[0] = uint256(6588539443113394141574608437156985277781026041593656514393004293275545530068); // vk.K[482].X
        mul_input[1] = uint256(12101394519233005101862983456796046620353195150359586039820054360374607569506); // vk.K[482].Y
        mul_input[2] = input[481];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[482] * input[481]
        mul_input[0] = uint256(1755919323789988768983216442930394382474251505598902110309222526307321631339); // vk.K[483].X
        mul_input[1] = uint256(15864264349434499713887093178950909159947362341874064972022120710727669032191); // vk.K[483].Y
        mul_input[2] = input[482];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[483] * input[482]
        mul_input[0] = uint256(15588461425014681528358731140609436108900070882590929061936387618813003966456); // vk.K[484].X
        mul_input[1] = uint256(8293964341848191840067528159953469335075737377949458509335547302731497773549); // vk.K[484].Y
        mul_input[2] = input[483];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[484] * input[483]
        mul_input[0] = uint256(6070395336889322157279325720708526151584738192911309484096390289575862466909); // vk.K[485].X
        mul_input[1] = uint256(20381621615109526617460220136787964265702014916115557070743129221659546665646); // vk.K[485].Y
        mul_input[2] = input[484];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[485] * input[484]
        mul_input[0] = uint256(15880900284598119389625039175473431279719733334901181636402364207151770870897); // vk.K[486].X
        mul_input[1] = uint256(11117747000724513169469404972980378973748428859794049866919031098332973737181); // vk.K[486].Y
        mul_input[2] = input[485];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[486] * input[485]
        mul_input[0] = uint256(12335996234152601463076345886737155799862937589897126732356982779821979257778); // vk.K[487].X
        mul_input[1] = uint256(7448152162832159634121380782519484832545414465461345826160384123263166842826); // vk.K[487].Y
        mul_input[2] = input[486];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[487] * input[486]
        mul_input[0] = uint256(16265327591701629174654594896818950787386787180590607611690951879884176551606); // vk.K[488].X
        mul_input[1] = uint256(6365015177644656173444008116104273266200834951292395323254158509794873773099); // vk.K[488].Y
        mul_input[2] = input[487];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[488] * input[487]
        mul_input[0] = uint256(3048304433240672318309868829971942346360938553190580154816146855252545921823); // vk.K[489].X
        mul_input[1] = uint256(16694360438456502818914337171210158374145883989421150011893026251276088586290); // vk.K[489].Y
        mul_input[2] = input[488];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[489] * input[488]
        mul_input[0] = uint256(4546070439676092503228161125929294743100041413391712345552793204623815101648); // vk.K[490].X
        mul_input[1] = uint256(4785470513135355469825794880569717064334053314912486573015850278078886677582); // vk.K[490].Y
        mul_input[2] = input[489];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[490] * input[489]
        mul_input[0] = uint256(4200529740004837367846657686526003743879074876358886168463874422349885386649); // vk.K[491].X
        mul_input[1] = uint256(4540989462011836335859031250919658043335506932466869306490147379881439113646); // vk.K[491].Y
        mul_input[2] = input[490];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[491] * input[490]
        mul_input[0] = uint256(13535229355179501677747975859998997286501688330419179459404711635803981590965); // vk.K[492].X
        mul_input[1] = uint256(18111282613483238697427320122805776092602059656247840506634660319270011995160); // vk.K[492].Y
        mul_input[2] = input[491];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[492] * input[491]
        mul_input[0] = uint256(16838036130679019644360798660322410148033027130779764693688853588537583092482); // vk.K[493].X
        mul_input[1] = uint256(11271659379811046728344581163674594696447323988715882593694674652715506437102); // vk.K[493].Y
        mul_input[2] = input[492];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[493] * input[492]
        mul_input[0] = uint256(20208851382609663489960365508145879175417539039860478394010752957220649691210); // vk.K[494].X
        mul_input[1] = uint256(2218700947509158710076770891624017318663390492585075698151645678705911648000); // vk.K[494].Y
        mul_input[2] = input[493];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[494] * input[493]
        mul_input[0] = uint256(14309949056896504098058549112506565027485192829967900335461105439141956602931); // vk.K[495].X
        mul_input[1] = uint256(5875822041591840010187706754038139723416164176471609951035428566283012075762); // vk.K[495].Y
        mul_input[2] = input[494];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[495] * input[494]
        mul_input[0] = uint256(8915632776480804986171808757932624445583324262077631227911031162762883779618); // vk.K[496].X
        mul_input[1] = uint256(7916686454390532339327800534127341205651988118318209379758573530514290890696); // vk.K[496].Y
        mul_input[2] = input[495];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[496] * input[495]
        mul_input[0] = uint256(15527017106446218469269786580271443352138354015707494625282799366127114900759); // vk.K[497].X
        mul_input[1] = uint256(14753211496091574632766655024551935585734364944190185923430958415445856496300); // vk.K[497].Y
        mul_input[2] = input[496];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[497] * input[496]
        mul_input[0] = uint256(21037026205681356096202235068693645442285313472775166057709657244472831684828); // vk.K[498].X
        mul_input[1] = uint256(9217299889542803475081975346133073335465929125216456357830349372195784522355); // vk.K[498].Y
        mul_input[2] = input[497];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[498] * input[497]
        mul_input[0] = uint256(8367959225051732636757175780701257119930713544366882351551452830129716845403); // vk.K[499].X
        mul_input[1] = uint256(15888420695884741058951051858932909572784376486781510991128911345837364846323); // vk.K[499].Y
        mul_input[2] = input[498];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[499] * input[498]
        mul_input[0] = uint256(7105924474639447262193853253352152954466359542070614686404946007098162541195); // vk.K[500].X
        mul_input[1] = uint256(1350934890528152316467568104848360141914614164696487118670381639212365093516); // vk.K[500].Y
        mul_input[2] = input[499];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[500] * input[499]
        mul_input[0] = uint256(15094739239577965646674640943764084355204153835966324156088749810314958285796); // vk.K[501].X
        mul_input[1] = uint256(16203534214576943491474456770118783803807415452572953109936044014055225637132); // vk.K[501].Y
        mul_input[2] = input[500];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[501] * input[500]
        mul_input[0] = uint256(6662987988313447925784629026763539357368441553071550520939816716889425259030); // vk.K[502].X
        mul_input[1] = uint256(55465303939118062747072319069650016592351720842959431588809232166171924789); // vk.K[502].Y
        mul_input[2] = input[501];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[502] * input[501]
        mul_input[0] = uint256(7899251776034751509592897690638144046178954028375173776705956220644413218767); // vk.K[503].X
        mul_input[1] = uint256(11412464382054533003281789062408051127942578035785799338463043698205141784018); // vk.K[503].Y
        mul_input[2] = input[502];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[503] * input[502]
        mul_input[0] = uint256(2759195151954759666378280115285472264661208673941375473091212060888726578076); // vk.K[504].X
        mul_input[1] = uint256(8333354098575628223854964736264636768419077833265658306086400007529372079815); // vk.K[504].Y
        mul_input[2] = input[503];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[504] * input[503]
        mul_input[0] = uint256(15418256049845001584018554959168980275754766738642338628670470479466014958569); // vk.K[505].X
        mul_input[1] = uint256(14739742698590228309275461082466801612864508026412810428852072614686705747867); // vk.K[505].Y
        mul_input[2] = input[504];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[505] * input[504]
        mul_input[0] = uint256(17946354245533122534520848295345243001054117151496610696081989125113131496650); // vk.K[506].X
        mul_input[1] = uint256(207180887915077246928921003506617197887976167978621829398845894710254641718); // vk.K[506].Y
        mul_input[2] = input[505];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[506] * input[505]
        mul_input[0] = uint256(10889312394108055347878011301351063231391214478547955489878155021513499713711); // vk.K[507].X
        mul_input[1] = uint256(15234445271809458395457273793075609912955005313260439706381088069515089868126); // vk.K[507].Y
        mul_input[2] = input[506];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[507] * input[506]
        mul_input[0] = uint256(3018671089083798481063111924874783615821772365044448166428576151269455161822); // vk.K[508].X
        mul_input[1] = uint256(15995459116925076809928382153833047577518569959914456387777681755543841704271); // vk.K[508].Y
        mul_input[2] = input[507];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[508] * input[507]
        mul_input[0] = uint256(6100559552555236338163052665232255683755325675459663895610404222783986297867); // vk.K[509].X
        mul_input[1] = uint256(16925320438821271159382111566444730393463412859315923843118221739100227859875); // vk.K[509].Y
        mul_input[2] = input[508];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[509] * input[508]
        mul_input[0] = uint256(15468410373801151423848248893010748404259727069876808529054651793595945307396); // vk.K[510].X
        mul_input[1] = uint256(11181066593426115852538873107657282363044449046140622320200181810417591076370); // vk.K[510].Y
        mul_input[2] = input[509];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[510] * input[509]
        mul_input[0] = uint256(3609774431484283465779575145851008530251387023776584878656344812759621970736); // vk.K[511].X
        mul_input[1] = uint256(6719291044987899274037690943178183567042281108299578966978148998678932829917); // vk.K[511].Y
        mul_input[2] = input[510];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[511] * input[510]
        mul_input[0] = uint256(4731589686612656010889350290785648372426635805285725613016645204490604559116); // vk.K[512].X
        mul_input[1] = uint256(13303328192881424390027773231543639362670540461345414076192609224994134059769); // vk.K[512].Y
        mul_input[2] = input[511];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[512] * input[511]
        mul_input[0] = uint256(6774661465072997130210168590894437366076072065795703090729420673041833788064); // vk.K[513].X
        mul_input[1] = uint256(4940542094484098440513359266562511715292440175154092595403021500907385614219); // vk.K[513].Y
        mul_input[2] = input[512];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[513] * input[512]
        mul_input[0] = uint256(4891609928211624464379059670209775667315123721257764049313843119029500845751); // vk.K[514].X
        mul_input[1] = uint256(3963629426953021061880828812463607702700283202134371095662434482501319812342); // vk.K[514].Y
        mul_input[2] = input[513];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[514] * input[513]
        mul_input[0] = uint256(11732613749949683532103865226132623566016880112122186089902977319879578265235); // vk.K[515].X
        mul_input[1] = uint256(2149819971721897934674746216315826459515473749124164735468708303503836317391); // vk.K[515].Y
        mul_input[2] = input[514];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[515] * input[514]
        mul_input[0] = uint256(7593883581492650375784745033806496327037177468602424658649054377963981042408); // vk.K[516].X
        mul_input[1] = uint256(9361434206854538563967140587872445032460926370239894989143381465845537632536); // vk.K[516].Y
        mul_input[2] = input[515];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[516] * input[515]
        mul_input[0] = uint256(13081480910060122392059900591958129389593793071390747054122386737127604871014); // vk.K[517].X
        mul_input[1] = uint256(9774013605739472680607871163137144465099927736591440776445173543037382856978); // vk.K[517].Y
        mul_input[2] = input[516];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[517] * input[516]
        mul_input[0] = uint256(1512613307532172365266388746313919856548223686911955017835849249337089144828); // vk.K[518].X
        mul_input[1] = uint256(8724765223236261768220530845572119602442009005255850734868632341416932024712); // vk.K[518].Y
        mul_input[2] = input[517];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[518] * input[517]
        mul_input[0] = uint256(5665673181139660390058454147526067425090491743871030344588358621318823528990); // vk.K[519].X
        mul_input[1] = uint256(21496578393290076797475178786153123256148360887362590825572733609571742526877); // vk.K[519].Y
        mul_input[2] = input[518];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[519] * input[518]
        mul_input[0] = uint256(3855630220608521397127329395973485933327900509732930598134748038721794975571); // vk.K[520].X
        mul_input[1] = uint256(6945863505538639567662901057285257471417414834834847858967416044142262903904); // vk.K[520].Y
        mul_input[2] = input[519];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[520] * input[519]
        mul_input[0] = uint256(2016125409595684194511908031260621850780776780410133902933770069956673201441); // vk.K[521].X
        mul_input[1] = uint256(7139343780201705580751108398118233577018446421698672380143593077944732782186); // vk.K[521].Y
        mul_input[2] = input[520];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[521] * input[520]
        mul_input[0] = uint256(11777563590206838561496392393568359516552696280131486989927316178807219785657); // vk.K[522].X
        mul_input[1] = uint256(9672170250462431782848196399997901080024889711711078304255053287338276077488); // vk.K[522].Y
        mul_input[2] = input[521];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[522] * input[521]
        mul_input[0] = uint256(18224722130263250446293069998275010177809691253770704667536865048828590869580); // vk.K[523].X
        mul_input[1] = uint256(5900098711383746065054314065979780028040303880826034890876807750532304372773); // vk.K[523].Y
        mul_input[2] = input[522];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[523] * input[522]
        mul_input[0] = uint256(19576646896445034581293650363289379301902339367450536911304942755854300670758); // vk.K[524].X
        mul_input[1] = uint256(7289508154057066823338815403163600068127296242836967034648236737891178804954); // vk.K[524].Y
        mul_input[2] = input[523];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[524] * input[523]
        mul_input[0] = uint256(17040166158773016682214662012631453538886839606607494748995636228700511007082); // vk.K[525].X
        mul_input[1] = uint256(4883127140772338142326260794638285393996297573225115197190512445185465025604); // vk.K[525].Y
        mul_input[2] = input[524];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[525] * input[524]
        mul_input[0] = uint256(5054134298992051728012597177161067799272069438808789868244251811171025770039); // vk.K[526].X
        mul_input[1] = uint256(17891531264890685940442729263585377262560040812206478070134756687207685449488); // vk.K[526].Y
        mul_input[2] = input[525];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[526] * input[525]
        mul_input[0] = uint256(4814549429264783755241743016065352137522639955230370670939315860204360496371); // vk.K[527].X
        mul_input[1] = uint256(13119213976048390383462119873788821041159902674834569811426613230036730709626); // vk.K[527].Y
        mul_input[2] = input[526];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[527] * input[526]
        mul_input[0] = uint256(2777534460338354604675855154948756787127616927455349229515070302160880248893); // vk.K[528].X
        mul_input[1] = uint256(4581067882219411415747883038766078197860379041305152583044681400882083685738); // vk.K[528].Y
        mul_input[2] = input[527];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[528] * input[527]
        mul_input[0] = uint256(9798262316311357755886264520597849772764356520099841846822765505529229250611); // vk.K[529].X
        mul_input[1] = uint256(13190000348960950040395621928182906349411290156319857795969882030652512861574); // vk.K[529].Y
        mul_input[2] = input[528];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[529] * input[528]
        mul_input[0] = uint256(15269510148608937742493047913582707061347023214898178945789069116095408903284); // vk.K[530].X
        mul_input[1] = uint256(3379084561826339585776422997835353171385842101222475058528813701332756154875); // vk.K[530].Y
        mul_input[2] = input[529];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[530] * input[529]
        mul_input[0] = uint256(6227382352068694598698838891024772876089126597753447439351423812893233981185); // vk.K[531].X
        mul_input[1] = uint256(21049811707285776457350796924524932748966636265502055846062868150379342208924); // vk.K[531].Y
        mul_input[2] = input[530];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[531] * input[530]
        mul_input[0] = uint256(10062114709404032353290873522754809042685204837062726803004155727764158644705); // vk.K[532].X
        mul_input[1] = uint256(14399502584619920187296127248697656993031207480567062166613066514626489222037); // vk.K[532].Y
        mul_input[2] = input[531];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[532] * input[531]
        mul_input[0] = uint256(17987824981278238319458976039841349977716762951076316249956442227787280566599); // vk.K[533].X
        mul_input[1] = uint256(20738470559433737654865145175978276523136639727618648390754185971833584568784); // vk.K[533].Y
        mul_input[2] = input[532];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[533] * input[532]
        mul_input[0] = uint256(11526324147725188095523650560335142664092801986951859107801038983483223169022); // vk.K[534].X
        mul_input[1] = uint256(9284474054576075296012520780232834640099351407131147509371716622122659817649); // vk.K[534].Y
        mul_input[2] = input[533];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[534] * input[533]
        mul_input[0] = uint256(3093890463695749014838642968077460255974122107686970303538644266852996039325); // vk.K[535].X
        mul_input[1] = uint256(12402751623249029153782048370410549864042808820393258980914948354500913725100); // vk.K[535].Y
        mul_input[2] = input[534];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[535] * input[534]
        mul_input[0] = uint256(21084698502759889000893478985989117131386933253174165165027001642058405982484); // vk.K[536].X
        mul_input[1] = uint256(13633803621842192558864420349071610422110279669422402014738856537877524919222); // vk.K[536].Y
        mul_input[2] = input[535];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[536] * input[535]
        mul_input[0] = uint256(6833916941033336686490510532254459385688781717264510652267218349676347697658); // vk.K[537].X
        mul_input[1] = uint256(16129614696408398229507146614473208006256233588435970800775051410310194192966); // vk.K[537].Y
        mul_input[2] = input[536];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[537] * input[536]
        mul_input[0] = uint256(9035374091791272751855915653069391304059214102638651184897081726302638050509); // vk.K[538].X
        mul_input[1] = uint256(3507900670375965165287685367004968632550205485827711324592687486775794918793); // vk.K[538].Y
        mul_input[2] = input[537];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[538] * input[537]
        mul_input[0] = uint256(18821982348352428436816076916186123248344485382016252082728532977216266778053); // vk.K[539].X
        mul_input[1] = uint256(21640401421403662380075817260519682761414116853490167872701204199410580679426); // vk.K[539].Y
        mul_input[2] = input[538];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[539] * input[538]
        mul_input[0] = uint256(161695329217278174462561396368261062444069270730556344469963310419598940250); // vk.K[540].X
        mul_input[1] = uint256(5636257393345019771203831030201873714656429200613101414283795944799589934077); // vk.K[540].Y
        mul_input[2] = input[539];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[540] * input[539]
        mul_input[0] = uint256(16717236569066086111942345951234717353633963811329404949162372566049647844792); // vk.K[541].X
        mul_input[1] = uint256(14730707698556306299573720201352722229294312868619014381936258576598694685759); // vk.K[541].Y
        mul_input[2] = input[540];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[541] * input[540]
        mul_input[0] = uint256(5520324716816638339862749726911498999570979279444462670532481970142661508546); // vk.K[542].X
        mul_input[1] = uint256(9240741057985389075599414861981597657912892493874149502063381138467059981339); // vk.K[542].Y
        mul_input[2] = input[541];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[542] * input[541]
        mul_input[0] = uint256(8022090382832144098693216994450308394779057154700182735694204245257054903719); // vk.K[543].X
        mul_input[1] = uint256(21121990159051316645334281901070098914610049592135362431418731434762057735255); // vk.K[543].Y
        mul_input[2] = input[542];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[543] * input[542]
        mul_input[0] = uint256(7555262258713329842497069038726249185740375990515758330797733023489084493477); // vk.K[544].X
        mul_input[1] = uint256(5319823236450586238548807479354072553338593716787701604079612939218105088457); // vk.K[544].Y
        mul_input[2] = input[543];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[544] * input[543]
        mul_input[0] = uint256(18070360142629865551343108983596014106028290624461992983304269184817274001672); // vk.K[545].X
        mul_input[1] = uint256(11029459217660702605676364141962807033899561279725422021767708905108029445591); // vk.K[545].Y
        mul_input[2] = input[544];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[545] * input[544]
        mul_input[0] = uint256(6768080059281940967261571400225324999940741616046544646534020339602530165677); // vk.K[546].X
        mul_input[1] = uint256(1169031941131881153715757779467660928514612206876230166781068826139879618695); // vk.K[546].Y
        mul_input[2] = input[545];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[546] * input[545]
        mul_input[0] = uint256(1523470773189884196932136622975961284192285876700311684769244592144417924751); // vk.K[547].X
        mul_input[1] = uint256(16279022846689898017295188300173579271989462704223477483091822211685341985359); // vk.K[547].Y
        mul_input[2] = input[546];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[547] * input[546]
        mul_input[0] = uint256(9999080888935915723715205212560955473183509381740609050887125004989200337447); // vk.K[548].X
        mul_input[1] = uint256(992456728840456966649494688501081911070375606153877639698412943147740628742); // vk.K[548].Y
        mul_input[2] = input[547];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[548] * input[547]
        mul_input[0] = uint256(11026228736801624817745936835339463516082230346438083697423145802778987933012); // vk.K[549].X
        mul_input[1] = uint256(15914970379238145320224130737847133802188508002619094622950346680280996301519); // vk.K[549].Y
        mul_input[2] = input[548];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[549] * input[548]
        mul_input[0] = uint256(3323230374903224436168931267296061581779055133654769146892237916274658704773); // vk.K[550].X
        mul_input[1] = uint256(3088623097095567087396662371484380799238160301762511917658368248501520814898); // vk.K[550].Y
        mul_input[2] = input[549];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[550] * input[549]
        mul_input[0] = uint256(17794321830275138096837713026573389475223939388890216822817244237115310898503); // vk.K[551].X
        mul_input[1] = uint256(20122957510991096712695108149322230251533589671624489921099039395767145144951); // vk.K[551].Y
        mul_input[2] = input[550];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[551] * input[550]
        mul_input[0] = uint256(9234780173405999921611867405457690119430664050315699964748010574294323946299); // vk.K[552].X
        mul_input[1] = uint256(5220784653492982660435599361882471463093739218209898601173459758352490763358); // vk.K[552].Y
        mul_input[2] = input[551];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[552] * input[551]
        mul_input[0] = uint256(4881217996999890339555771671385567607612773612742540108039059284283141654797); // vk.K[553].X
        mul_input[1] = uint256(5632333759454471998011135975558762105478578634191133332669723426299147904153); // vk.K[553].Y
        mul_input[2] = input[552];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[553] * input[552]
        mul_input[0] = uint256(18783590928443836596906030958252264456456823574634023444191970559127305857723); // vk.K[554].X
        mul_input[1] = uint256(13370670183958815139756190575929284585116079822383048433027291430053778299316); // vk.K[554].Y
        mul_input[2] = input[553];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[554] * input[553]
        mul_input[0] = uint256(18687907890303944743367383704592465449189553398177093514030058762437708333605); // vk.K[555].X
        mul_input[1] = uint256(2844171085000413877045927233982782088474421571343628957621733357689251719389); // vk.K[555].Y
        mul_input[2] = input[554];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[555] * input[554]
        mul_input[0] = uint256(16834762593772370263255198645776017655416154149607861329648580644033325384181); // vk.K[556].X
        mul_input[1] = uint256(18444271293923435921461548086431721130236820265073476496199392882786063900372); // vk.K[556].Y
        mul_input[2] = input[555];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[556] * input[555]
        mul_input[0] = uint256(16704639032532061795859009313075973503348651928235427091201002874450998248142); // vk.K[557].X
        mul_input[1] = uint256(4627729157453858941795014707878107135020946271017870885806889625677337499840); // vk.K[557].Y
        mul_input[2] = input[556];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[557] * input[556]
        mul_input[0] = uint256(20167837394607058848673928340866132909859593433909957490138480238734309943410); // vk.K[558].X
        mul_input[1] = uint256(16968954601003331649916320177468955132986648660443834526944164632261035393853); // vk.K[558].Y
        mul_input[2] = input[557];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[558] * input[557]
        mul_input[0] = uint256(20595714050649854154666610289220026791460324864401189289272762381364373510962); // vk.K[559].X
        mul_input[1] = uint256(1147092121608884015914299497436429793709184193853811196265784366915452267245); // vk.K[559].Y
        mul_input[2] = input[558];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[559] * input[558]
        mul_input[0] = uint256(20896875805583567103564897260968319950138372582190432725571461035225852775743); // vk.K[560].X
        mul_input[1] = uint256(14142005749963785714986917466867438672600793245300411554685717112874615203262); // vk.K[560].Y
        mul_input[2] = input[559];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[560] * input[559]
        mul_input[0] = uint256(2016103282525331016107884808609505593145475171259166978990797349081182399405); // vk.K[561].X
        mul_input[1] = uint256(9413080266170683175209036369894613069404043315309556427260443066842198769751); // vk.K[561].Y
        mul_input[2] = input[560];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[561] * input[560]
        mul_input[0] = uint256(10401080166121889859561547515665422060538843748408570600858062681757050792812); // vk.K[562].X
        mul_input[1] = uint256(17160106985678932796387703649173075231885399869638711386998138535490132578329); // vk.K[562].Y
        mul_input[2] = input[561];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[562] * input[561]
        mul_input[0] = uint256(5557705536508142840782505669944118260787962398943393948800775039121288018289); // vk.K[563].X
        mul_input[1] = uint256(617543349850647501670427489919020666161007664899733697792665238439822316230); // vk.K[563].Y
        mul_input[2] = input[562];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[563] * input[562]
        mul_input[0] = uint256(14848250646815553305023828908301143755188926271607594469876427840666210502353); // vk.K[564].X
        mul_input[1] = uint256(5409526117958731740185312574762567161718778681386659827847438888993794392130); // vk.K[564].Y
        mul_input[2] = input[563];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[564] * input[563]
        mul_input[0] = uint256(9793036692925620456880225615512510401637420391508062387100333124706121687599); // vk.K[565].X
        mul_input[1] = uint256(14106889001008343948527958720601151903209504444322677619699972225825970770633); // vk.K[565].Y
        mul_input[2] = input[564];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[565] * input[564]
        mul_input[0] = uint256(9142352723430649015768826928179463780272501309785260629298431538818821990594); // vk.K[566].X
        mul_input[1] = uint256(13683625025056151911698383178097054872211394927764763787499568900518024794775); // vk.K[566].Y
        mul_input[2] = input[565];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[566] * input[565]
        mul_input[0] = uint256(13338042154395955252426230508301720937250909750778545829583407110379301980386); // vk.K[567].X
        mul_input[1] = uint256(12389283080130926262387891430434850825857782515444775981414796739399408560085); // vk.K[567].Y
        mul_input[2] = input[566];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[567] * input[566]
        mul_input[0] = uint256(1360362665331603508601215491220932069606890570816765019769516700710088745679); // vk.K[568].X
        mul_input[1] = uint256(12791744754361500249335814656423368296650697774779326158816673240056107154388); // vk.K[568].Y
        mul_input[2] = input[567];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[568] * input[567]
        mul_input[0] = uint256(5678536643006776504552970152966733562752205253208087528457682628278092304368); // vk.K[569].X
        mul_input[1] = uint256(594226144771206104394995473404368342096248274213357502039358746870273368331); // vk.K[569].Y
        mul_input[2] = input[568];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[569] * input[568]
        mul_input[0] = uint256(19802915983089629067583516817962578423291237659846882402613184887154452502610); // vk.K[570].X
        mul_input[1] = uint256(18541396767468401198636471220159547027654207963318567569871302221127362334045); // vk.K[570].Y
        mul_input[2] = input[569];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[570] * input[569]
        mul_input[0] = uint256(1245737686891082797740873277190496836735988400354164380826507663444590262676); // vk.K[571].X
        mul_input[1] = uint256(6205969742115947898825175253205083526815981552565992784524677747016539652183); // vk.K[571].Y
        mul_input[2] = input[570];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[571] * input[570]
        mul_input[0] = uint256(240173346949956560324347335665972052095053918471098942317762482870097174851); // vk.K[572].X
        mul_input[1] = uint256(9825297816142183142601071478326185497700199878297476551497746719600035890240); // vk.K[572].Y
        mul_input[2] = input[571];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[572] * input[571]
        mul_input[0] = uint256(4176645232462472931528724025283429701696240965099931511162147182217450671886); // vk.K[573].X
        mul_input[1] = uint256(10626772420233105055730467499222772080753391181049724615787437449578401783860); // vk.K[573].Y
        mul_input[2] = input[572];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[573] * input[572]
        mul_input[0] = uint256(431621881785627024519360043668074500892321662143776619948084253112884740681); // vk.K[574].X
        mul_input[1] = uint256(15193725678848187536407485939410525165126287789632922792002234173771738887126); // vk.K[574].Y
        mul_input[2] = input[573];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[574] * input[573]
        mul_input[0] = uint256(16560329765917888773017769051748765303883301517895913948024162035595223571443); // vk.K[575].X
        mul_input[1] = uint256(20688584609371969843403136501239969648185445640492552668569598442898745641730); // vk.K[575].Y
        mul_input[2] = input[574];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[575] * input[574]
        mul_input[0] = uint256(781752598305041696416704467167157617223840437271056120577107212882164964429); // vk.K[576].X
        mul_input[1] = uint256(18716176481290106680172319277451787868594295684703269165301525833000520292614); // vk.K[576].Y
        mul_input[2] = input[575];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[576] * input[575]
        mul_input[0] = uint256(4292431963123092086974066820592043515890506826769485528563688363587014713441); // vk.K[577].X
        mul_input[1] = uint256(18071346378315525560801709407357806041100034708688444128276881372964496226532); // vk.K[577].Y
        mul_input[2] = input[576];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[577] * input[576]
        mul_input[0] = uint256(4275552982128970672070882156314812138104699893367402128691745128981237756211); // vk.K[578].X
        mul_input[1] = uint256(13598038324658111128592247741774101713133990791254257692119040404492092835622); // vk.K[578].Y
        mul_input[2] = input[577];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[578] * input[577]
        mul_input[0] = uint256(16133865221017633868263988894186314419614923592931632599147888407252317727711); // vk.K[579].X
        mul_input[1] = uint256(11144485875828519282767938043007336744023290427558921559628245292583258197786); // vk.K[579].Y
        mul_input[2] = input[578];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[579] * input[578]
        mul_input[0] = uint256(2538987904356720613243196039550532125129196321707525234451618711351118975971); // vk.K[580].X
        mul_input[1] = uint256(15616942786436820129463071302218239046188355572743210806890494611183198088965); // vk.K[580].Y
        mul_input[2] = input[579];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[580] * input[579]
        mul_input[0] = uint256(17581853145061870255617327183932456594902532206644733089105136979673771686857); // vk.K[581].X
        mul_input[1] = uint256(18679313652535478534047200807332123386222739870222416142246583918294020539910); // vk.K[581].Y
        mul_input[2] = input[580];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[581] * input[580]
        mul_input[0] = uint256(9160829385779344823483640476813396066338262510843452447442675552501803692568); // vk.K[582].X
        mul_input[1] = uint256(2781291405636467913609056910319061633494506210051399934696843816328509527120); // vk.K[582].Y
        mul_input[2] = input[581];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[582] * input[581]
        mul_input[0] = uint256(7603342504938921050404163115025459893665858123256831889693281256960756481199); // vk.K[583].X
        mul_input[1] = uint256(2824058249489726307053069236333115679162655535953347451074856800031826366564); // vk.K[583].Y
        mul_input[2] = input[582];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[583] * input[582]
        mul_input[0] = uint256(14551489374527943807001135577382027881471365718182234463029839969181369756581); // vk.K[584].X
        mul_input[1] = uint256(8876228358500037767161585698496802892271962632143790267619233479547287170456); // vk.K[584].Y
        mul_input[2] = input[583];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[584] * input[583]
        mul_input[0] = uint256(19272132711151417887407662982014194448461408354622323350017674103610889165882); // vk.K[585].X
        mul_input[1] = uint256(17638910513550185675867820466459364037152884934879735565007793430205231312645); // vk.K[585].Y
        mul_input[2] = input[584];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[585] * input[584]
        mul_input[0] = uint256(8458048162112567279081103859492657819368750750966178582255526945086527061031); // vk.K[586].X
        mul_input[1] = uint256(3593404616122204233912124459858778721607533258267763919180829964168912795136); // vk.K[586].Y
        mul_input[2] = input[585];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[586] * input[585]
        mul_input[0] = uint256(5168297437851563012355180649157726325181843047723436404228860260190201884705); // vk.K[587].X
        mul_input[1] = uint256(8471407879347014500445133025323769993149831774355442565189349649833941087173); // vk.K[587].Y
        mul_input[2] = input[586];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[587] * input[586]
        mul_input[0] = uint256(20467904712236521402335761152725987822077282796752250214539351681260950732298); // vk.K[588].X
        mul_input[1] = uint256(1949238275899777546263670975450024860859191090626342387188989381253460776007); // vk.K[588].Y
        mul_input[2] = input[587];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[588] * input[587]
        mul_input[0] = uint256(21630621995684749652179477518754791236508784210434285308023387487986870979324); // vk.K[589].X
        mul_input[1] = uint256(19113290116578045284222926391867131965387841790528690202355630868981542783552); // vk.K[589].Y
        mul_input[2] = input[588];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[589] * input[588]
        mul_input[0] = uint256(12665267524567738031254745388524929748134343571538875842319805220728929889779); // vk.K[590].X
        mul_input[1] = uint256(18213261077483842313551858168332153405272573528725764796229944582985309917059); // vk.K[590].Y
        mul_input[2] = input[589];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[590] * input[589]
        mul_input[0] = uint256(472850194488543711091322465503889191526569360667171923565813580313964110283); // vk.K[591].X
        mul_input[1] = uint256(3446891796389327707658424667952518072378383536384283533851150346393793832297); // vk.K[591].Y
        mul_input[2] = input[590];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[591] * input[590]
        mul_input[0] = uint256(9446303267247823607977814617260321201291903545894060790518142161232951734136); // vk.K[592].X
        mul_input[1] = uint256(14203690731381500387542333032681547802688848923290406875596940166398825307827); // vk.K[592].Y
        mul_input[2] = input[591];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[592] * input[591]
        mul_input[0] = uint256(21773207558532982792976680292971709957376858687977137657694384387024931324503); // vk.K[593].X
        mul_input[1] = uint256(17320591923303589025375267984723218905410101198347580469710004191135368319242); // vk.K[593].Y
        mul_input[2] = input[592];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[593] * input[592]
        mul_input[0] = uint256(21576659883706519810513776215699047537080453497507421826328504641312470696883); // vk.K[594].X
        mul_input[1] = uint256(12774016768535503384798477918114991325914970140750410515353255357615037838007); // vk.K[594].Y
        mul_input[2] = input[593];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[594] * input[593]
        mul_input[0] = uint256(2811386691358686474034989048723426317605644195189133464878266589614858346870); // vk.K[595].X
        mul_input[1] = uint256(8049949402600142306351752962714996992704961208471498569519847981225528864246); // vk.K[595].Y
        mul_input[2] = input[594];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[595] * input[594]
        mul_input[0] = uint256(14134565346530971800464095533396020893599746485922135387666927252691787911709); // vk.K[596].X
        mul_input[1] = uint256(14858115487754550540142254446766280232752914062930629617953230327702006323234); // vk.K[596].Y
        mul_input[2] = input[595];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[596] * input[595]
        mul_input[0] = uint256(10259027272710267647334845833710201187543489594820091416417332664970709639294); // vk.K[597].X
        mul_input[1] = uint256(864776290279053719617237966956401951179769245968180327809850274553519577813); // vk.K[597].Y
        mul_input[2] = input[596];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[597] * input[596]
        mul_input[0] = uint256(3623621031158927405479807508016498197035539644715695348326852189100930480408); // vk.K[598].X
        mul_input[1] = uint256(2789248374724236941757580939778692334000273958804024371623092730023594459761); // vk.K[598].Y
        mul_input[2] = input[597];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[598] * input[597]
        mul_input[0] = uint256(19126151217095765691599474995642234586032852344009811658084043469529859075992); // vk.K[599].X
        mul_input[1] = uint256(2864111101247365222343155910833926961477111721305100394793445503449905621434); // vk.K[599].Y
        mul_input[2] = input[598];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[599] * input[598]
        mul_input[0] = uint256(18120761004687727563978355790644461318006268654495938980329820601272942476762); // vk.K[600].X
        mul_input[1] = uint256(12529198646915550367261707365928327997777374884401100473909516030623599380567); // vk.K[600].Y
        mul_input[2] = input[599];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[600] * input[599]
        mul_input[0] = uint256(12953700009719719842324627013340486448735647469761761942348359911626013118001); // vk.K[601].X
        mul_input[1] = uint256(13355863650723999376000484344659974008159418223807198279337932015362471843241); // vk.K[601].Y
        mul_input[2] = input[600];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[601] * input[600]
        mul_input[0] = uint256(8067112304925838543142804423210746404537862468299020993290905822647147710539); // vk.K[602].X
        mul_input[1] = uint256(17555102499549958616405730298299490434750018983678159277398622009744106755675); // vk.K[602].Y
        mul_input[2] = input[601];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[602] * input[601]
        mul_input[0] = uint256(3356644785400471856382907234506423182625509148817479447330862316653396974916); // vk.K[603].X
        mul_input[1] = uint256(12872298964693238013450033786479268249276933671413065761295462221234228749659); // vk.K[603].Y
        mul_input[2] = input[602];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[603] * input[602]
        mul_input[0] = uint256(18052109406886243873116923518596654762638970684031473761698670968464144638608); // vk.K[604].X
        mul_input[1] = uint256(10353821493715281925622307791747348599711328759616792574728423668047621226275); // vk.K[604].Y
        mul_input[2] = input[603];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[604] * input[603]
        mul_input[0] = uint256(18603992351507658329206272688549189494081249961720481823672497084885943168224); // vk.K[605].X
        mul_input[1] = uint256(16282619024074674403437578811479185168189224559929757698072218430379181313175); // vk.K[605].Y
        mul_input[2] = input[604];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[605] * input[604]
        mul_input[0] = uint256(4808085528880321132778428861828380970499442512174710401823787271484888138829); // vk.K[606].X
        mul_input[1] = uint256(13738885989642570574674279298051637994812546763759411652212365117351643566449); // vk.K[606].Y
        mul_input[2] = input[605];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[606] * input[605]
        mul_input[0] = uint256(5737335127350054836186464121187741894360244532509135950357224765501873633137); // vk.K[607].X
        mul_input[1] = uint256(8653869013912380305450438097617813517329847782272664252143992038362787451708); // vk.K[607].Y
        mul_input[2] = input[606];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[607] * input[606]
        mul_input[0] = uint256(14169074143981976932866962669200677635523590731321715951449986440860607824553); // vk.K[608].X
        mul_input[1] = uint256(3165175950533565052878520438170935328463324157507973858992654491525794015551); // vk.K[608].Y
        mul_input[2] = input[607];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[608] * input[607]
        mul_input[0] = uint256(5686911966136725109912471499832014747215202326009945607843733230734120129664); // vk.K[609].X
        mul_input[1] = uint256(8611963419900237816224054414118254843154720465089065794288680656817516338769); // vk.K[609].Y
        mul_input[2] = input[608];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[609] * input[608]
        mul_input[0] = uint256(7046213662041788487905002111647104486841676439067031520892070087113756492263); // vk.K[610].X
        mul_input[1] = uint256(8389175045650921284116657977341052432629411848367020195333464688317659775926); // vk.K[610].Y
        mul_input[2] = input[609];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[610] * input[609]
        mul_input[0] = uint256(1428597490043510875305586057917768489427589126250203095775660720673260738342); // vk.K[611].X
        mul_input[1] = uint256(16650842062611217865875821230805260914926551293044215180377117867939367542654); // vk.K[611].Y
        mul_input[2] = input[610];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[611] * input[610]
        mul_input[0] = uint256(8515031480347946068910741173785436634757166447693324724126754719574426137002); // vk.K[612].X
        mul_input[1] = uint256(681344718244548324821846488751253076735269597942805222055204262457563792464); // vk.K[612].Y
        mul_input[2] = input[611];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[612] * input[611]
        mul_input[0] = uint256(1821958821088725664276483641607846542810507039919509934844335364420972701500); // vk.K[613].X
        mul_input[1] = uint256(2230912716653998899359393001792268141240475267466485274939110244442605412688); // vk.K[613].Y
        mul_input[2] = input[612];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[613] * input[612]
        mul_input[0] = uint256(21390075360662071499928870109047568833807159701298966552236149837925158840834); // vk.K[614].X
        mul_input[1] = uint256(15630368653092480935654090828629970865559878567929864144298003226473093704590); // vk.K[614].Y
        mul_input[2] = input[613];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[614] * input[613]
        mul_input[0] = uint256(20681246598706394058974536906577112736826308409521142395915181918216495101267); // vk.K[615].X
        mul_input[1] = uint256(12476400260158230057418012101856906260037574326470437322817092177673251600719); // vk.K[615].Y
        mul_input[2] = input[614];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[615] * input[614]
        mul_input[0] = uint256(16294539635088404844848859722200289584352595200832058790942052656278504869020); // vk.K[616].X
        mul_input[1] = uint256(13373356685107058458627556331184904403983084734033720748081967666889071021670); // vk.K[616].Y
        mul_input[2] = input[615];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[616] * input[615]
        mul_input[0] = uint256(8229005453162844550869085236007416105796074036017801119140137341167404894183); // vk.K[617].X
        mul_input[1] = uint256(4302950033886249763432707415680107377073990064985774755653012856492279756047); // vk.K[617].Y
        mul_input[2] = input[616];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[617] * input[616]
        mul_input[0] = uint256(18688502481458942352694070633989664426411270079332836086580878933463628408121); // vk.K[618].X
        mul_input[1] = uint256(15094781873198777473896439456161391520535763643411665056328633971326920142846); // vk.K[618].Y
        mul_input[2] = input[617];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[618] * input[617]
        mul_input[0] = uint256(9178580965477834482814693100912511268551510251391027653661837176805950440686); // vk.K[619].X
        mul_input[1] = uint256(11383599764353537907687284534428934425980498143571292496436697473188247932228); // vk.K[619].Y
        mul_input[2] = input[618];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[619] * input[618]
        mul_input[0] = uint256(4738088363453569315608597419370771670811506261654858189303662375897101436211); // vk.K[620].X
        mul_input[1] = uint256(994242107572526009511562958009728090330338179465449470524170887313972870669); // vk.K[620].Y
        mul_input[2] = input[619];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[620] * input[619]
        mul_input[0] = uint256(12006167724672487471485005899064073300348478749182791573500964388297554590304); // vk.K[621].X
        mul_input[1] = uint256(7405021083674230719122017411701882907267755735132959606101112350354656059897); // vk.K[621].Y
        mul_input[2] = input[620];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[621] * input[620]
        mul_input[0] = uint256(2412639728471195086317981483411915088471573286370852615327191168252181549649); // vk.K[622].X
        mul_input[1] = uint256(21083322082151620559794656966222517755311248362992975867528433807666313186252); // vk.K[622].Y
        mul_input[2] = input[621];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[622] * input[621]
        mul_input[0] = uint256(17670008945107832489974314814945009627749467586802985889422198099730584089457); // vk.K[623].X
        mul_input[1] = uint256(21802567729079687141464155984998215829587328575712810303199757913812334842069); // vk.K[623].Y
        mul_input[2] = input[622];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[623] * input[622]
        mul_input[0] = uint256(17689472940043553097291269282252849678264567197221784754149477151172023877878); // vk.K[624].X
        mul_input[1] = uint256(19275090850298328660085864675696956798676904778480469981655249389568790933182); // vk.K[624].Y
        mul_input[2] = input[623];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[624] * input[623]
        mul_input[0] = uint256(8261196242916209808986361724963260311262081875357444607992647770677992680139); // vk.K[625].X
        mul_input[1] = uint256(6902136888680254706094262586373430065254253255810742376847540049390701366580); // vk.K[625].Y
        mul_input[2] = input[624];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[625] * input[624]
        mul_input[0] = uint256(17238067002938242718195295955206249110645300957075667505240578839274457724007); // vk.K[626].X
        mul_input[1] = uint256(14239348396202690007917944526764249799139606602946338409687766966457491859125); // vk.K[626].Y
        mul_input[2] = input[625];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[626] * input[625]
        mul_input[0] = uint256(18217403308237977188096159268602408053601646000405241400833062355609187430723); // vk.K[627].X
        mul_input[1] = uint256(19413817613531042365782122172198348398036879311218909145695446096070448168979); // vk.K[627].Y
        mul_input[2] = input[626];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[627] * input[626]
        mul_input[0] = uint256(19290464716683187932290775185247770996609773065355650588275624135019703561645); // vk.K[628].X
        mul_input[1] = uint256(13058635687420275201843842437817598201622413861438859305449385261595956763491); // vk.K[628].Y
        mul_input[2] = input[627];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[628] * input[627]
        mul_input[0] = uint256(1940086972147127100785386032605305375489106798004737708759344993729127989905); // vk.K[629].X
        mul_input[1] = uint256(6030124645168844559700402984654879352561552105931360496091926307058025077029); // vk.K[629].Y
        mul_input[2] = input[628];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[629] * input[628]
        mul_input[0] = uint256(3430093872784556481752807182221467583376979063085319964839902289810580511697); // vk.K[630].X
        mul_input[1] = uint256(13589750252173667589844153854747601818757901506051685248547618761871713000078); // vk.K[630].Y
        mul_input[2] = input[629];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[630] * input[629]
        mul_input[0] = uint256(19463370333298055510749029538384495233467471793993742793666034355654232913052); // vk.K[631].X
        mul_input[1] = uint256(20467898606458141769872474506445145317287758220835369926075943111814987084188); // vk.K[631].Y
        mul_input[2] = input[630];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[631] * input[630]
        mul_input[0] = uint256(21638121350620762528709968340167439646743572055020865532512076344776418963602); // vk.K[632].X
        mul_input[1] = uint256(6843760686611167261284608537793521930331953207488379245406454523619139584829); // vk.K[632].Y
        mul_input[2] = input[631];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[632] * input[631]
        mul_input[0] = uint256(10186839217217012848033851633864380904378270119973292803129711638828753938442); // vk.K[633].X
        mul_input[1] = uint256(1026325271798548288847627927288859155961172498665873032241189087122244217609); // vk.K[633].Y
        mul_input[2] = input[632];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[633] * input[632]
        mul_input[0] = uint256(16414447346653714054775266643118609422373218961158767976437227989157062537089); // vk.K[634].X
        mul_input[1] = uint256(21581328182225853142152904922530073171979212656246082558080666659085383755565); // vk.K[634].Y
        mul_input[2] = input[633];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[634] * input[633]
        mul_input[0] = uint256(11385053210554531905348077635065306015902110499241308885199578202671824158802); // vk.K[635].X
        mul_input[1] = uint256(7049359603240801559933447045950126998577405416781768191510438497136256257259); // vk.K[635].Y
        mul_input[2] = input[634];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[635] * input[634]
        mul_input[0] = uint256(3803990085009337717333550153049847232594787205759290413767334689694507834951); // vk.K[636].X
        mul_input[1] = uint256(19415599582428558157089654855462617092566259522238815160827406443766189187300); // vk.K[636].Y
        mul_input[2] = input[635];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[636] * input[635]
        mul_input[0] = uint256(14564508982945745354555145216303130175781112106742690133934741117253648895434); // vk.K[637].X
        mul_input[1] = uint256(7914297730630536785650420117112318199975256488735205510598980725123459324043); // vk.K[637].Y
        mul_input[2] = input[636];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[637] * input[636]
        mul_input[0] = uint256(14073267770857570768211575081619267902611461983128802612028352780603893854787); // vk.K[638].X
        mul_input[1] = uint256(17028982381516544483062253600068959931833272032494914930604098528503512667755); // vk.K[638].Y
        mul_input[2] = input[637];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[638] * input[637]
        mul_input[0] = uint256(19548796876048868272260699171255418616392247287126934890892797171009329372235); // vk.K[639].X
        mul_input[1] = uint256(17180947363609557435057708376643088517600635916194782146506033396937619788269); // vk.K[639].Y
        mul_input[2] = input[638];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[639] * input[638]
        mul_input[0] = uint256(4416416621057406917038754672893377324837464361619085676952574973096990125237); // vk.K[640].X
        mul_input[1] = uint256(2576694312603682901511978774072640033780292320156195087837259518033453620393); // vk.K[640].Y
        mul_input[2] = input[639];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[640] * input[639]
        mul_input[0] = uint256(9881687985182200878715320916239035098298851048046103808653087631543433230968); // vk.K[641].X
        mul_input[1] = uint256(13603549127519554762550731970025581474709156962872978765832244012480423741761); // vk.K[641].Y
        mul_input[2] = input[640];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[641] * input[640]
        mul_input[0] = uint256(17223708347149872877738945982925439404304948216018823241093113660951488630943); // vk.K[642].X
        mul_input[1] = uint256(2535743034467074686684626275046211548093017688858973339350584362100926745769); // vk.K[642].Y
        mul_input[2] = input[641];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[642] * input[641]
        mul_input[0] = uint256(6680987874908732584413051693352993776148726007689208026782574781056454538578); // vk.K[643].X
        mul_input[1] = uint256(11713726287234863888572854161058830333275613292552999726158897720344474950171); // vk.K[643].Y
        mul_input[2] = input[642];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[643] * input[642]
        mul_input[0] = uint256(5601741747245104787382443512175121219428844045900322288060712557843136544427); // vk.K[644].X
        mul_input[1] = uint256(17030767478818042194916338228614617160073320033422167180614473408599832803293); // vk.K[644].Y
        mul_input[2] = input[643];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[644] * input[643]
        mul_input[0] = uint256(9253687147163832307199774123732509690625950624234561691372023039906161081958); // vk.K[645].X
        mul_input[1] = uint256(20185881934323162127276231976073176999140619460450192461319334363518640441507); // vk.K[645].Y
        mul_input[2] = input[644];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[645] * input[644]
        mul_input[0] = uint256(12548051951233966308515830813294102781163546481678480411532582544489798907605); // vk.K[646].X
        mul_input[1] = uint256(11893285625289044751791823690485288297041748114533238471179293216809527475791); // vk.K[646].Y
        mul_input[2] = input[645];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[646] * input[645]
        mul_input[0] = uint256(12495068161296087766719541544364176663137781381349799698757939178084276785903); // vk.K[647].X
        mul_input[1] = uint256(18711109516798552138587254416759679508233117877643489509365623981934026551726); // vk.K[647].Y
        mul_input[2] = input[646];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[647] * input[646]
        mul_input[0] = uint256(11560598323184465020612767307044665248719602108509613819774889640125832676858); // vk.K[648].X
        mul_input[1] = uint256(1326844724008204469952611566851129562616993337747231003097417965328485452004); // vk.K[648].Y
        mul_input[2] = input[647];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[648] * input[647]
        mul_input[0] = uint256(7795339737467481893908807420795502649971811505405536307700653915388942734080); // vk.K[649].X
        mul_input[1] = uint256(1015481379709569719247019903815182428749840313155591519912108654013120615597); // vk.K[649].Y
        mul_input[2] = input[648];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[649] * input[648]
        mul_input[0] = uint256(776198405888159817629396540453574223200038643640798852148245356098190098015); // vk.K[650].X
        mul_input[1] = uint256(15607345718540039191555794957437770172826713924241095966970859851112882407000); // vk.K[650].Y
        mul_input[2] = input[649];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[650] * input[649]
        mul_input[0] = uint256(8611194963015233173337793076785763817193945778168650517622119969935941873202); // vk.K[651].X
        mul_input[1] = uint256(8432947511845880105838881173853300787556046428221284672958873069226087118608); // vk.K[651].Y
        mul_input[2] = input[650];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[651] * input[650]
        mul_input[0] = uint256(6401048408253295444929291311756054418586513818561195008588665119719654827712); // vk.K[652].X
        mul_input[1] = uint256(11780865414125069284467849832055716518446194282228442037832123752102465500911); // vk.K[652].Y
        mul_input[2] = input[651];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[652] * input[651]
        mul_input[0] = uint256(20982422948663449526254299046954855443303640266732813022367030317762431414767); // vk.K[653].X
        mul_input[1] = uint256(512033969034259551985652690510699825410437884165216182456614386360015054259); // vk.K[653].Y
        mul_input[2] = input[652];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[653] * input[652]
        mul_input[0] = uint256(1075209533137615420541450204189136445295174225377186968613579384456451303499); // vk.K[654].X
        mul_input[1] = uint256(15865387079688670582945813378361231510550950643094942147600834107938124209632); // vk.K[654].Y
        mul_input[2] = input[653];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[654] * input[653]
        mul_input[0] = uint256(6546055079294300190235343462518375411322189472991605942076271711555336265838); // vk.K[655].X
        mul_input[1] = uint256(15590919091634544131527091958071450614186923943047947616243209299123973828343); // vk.K[655].Y
        mul_input[2] = input[654];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[655] * input[654]
        mul_input[0] = uint256(16817442297746155261451044935502096360939188914817792782854263926258024071110); // vk.K[656].X
        mul_input[1] = uint256(20613033035721803822584504482691661600434883876782462644233364704056546598966); // vk.K[656].Y
        mul_input[2] = input[655];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[656] * input[655]
        mul_input[0] = uint256(10238651208936557049365604520312009196014020090668114135232592363827942329295); // vk.K[657].X
        mul_input[1] = uint256(14984495491569830420162244520453675319892320540122189876022157316419945422782); // vk.K[657].Y
        mul_input[2] = input[656];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[657] * input[656]
        mul_input[0] = uint256(13784820617882914451602747027497835647065998410461544077367166834745171510439); // vk.K[658].X
        mul_input[1] = uint256(1737881126454412729814067213712775754862316063235561264359639210689247962903); // vk.K[658].Y
        mul_input[2] = input[657];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[658] * input[657]
        mul_input[0] = uint256(11286134694329505856868922958660605008228893697958621652939469261162144160057); // vk.K[659].X
        mul_input[1] = uint256(8698203328216399096409572981031358013194031077222756473375020844686516342447); // vk.K[659].Y
        mul_input[2] = input[658];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[659] * input[658]
        mul_input[0] = uint256(6996830438114722530995228329315663642883173535301528718131348183213619935321); // vk.K[660].X
        mul_input[1] = uint256(8947926020457921211287754440319753408687498410766120273859898543850769100859); // vk.K[660].Y
        mul_input[2] = input[659];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[660] * input[659]
        mul_input[0] = uint256(6977889632947581378882379543037818513021156509488831974656039602856925240897); // vk.K[661].X
        mul_input[1] = uint256(18271285672066976450649722393076258041583321518153740845336873382867355045460); // vk.K[661].Y
        mul_input[2] = input[660];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[661] * input[660]
        mul_input[0] = uint256(14428379996007126431172476176384359829666202477157991945968675132733067994304); // vk.K[662].X
        mul_input[1] = uint256(3694301868419734748455553063949113688765516425239760614777266893443344755367); // vk.K[662].Y
        mul_input[2] = input[661];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[662] * input[661]
        mul_input[0] = uint256(2050704354469028840005649447174520821817824988361009450983377125432951821716); // vk.K[663].X
        mul_input[1] = uint256(7906947208784429294241348347871199675262188681826821363703891954763318309525); // vk.K[663].Y
        mul_input[2] = input[662];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[663] * input[662]
        mul_input[0] = uint256(18025458456010227759263978236191107452742202644625569070086521745091845755819); // vk.K[664].X
        mul_input[1] = uint256(20631933810084607501661961767696502769206967885393533128160227999383009719605); // vk.K[664].Y
        mul_input[2] = input[663];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[664] * input[663]
        mul_input[0] = uint256(16880912282547773481526647544023112545752324014596401984030185269376273289117); // vk.K[665].X
        mul_input[1] = uint256(13859202359446108197381410189816049672959582430055007477332510016853084735404); // vk.K[665].Y
        mul_input[2] = input[664];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[665] * input[664]
        mul_input[0] = uint256(9596136859050693407916217520282326119046236886133759787805136006265774244651); // vk.K[666].X
        mul_input[1] = uint256(489256677740633311929298988175954644612432764565958877246733363490943894803); // vk.K[666].Y
        mul_input[2] = input[665];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[666] * input[665]
        mul_input[0] = uint256(15408006835359957946531169555388577897942713473052468675791951813931843725355); // vk.K[667].X
        mul_input[1] = uint256(5385718813510595789526837536629196655431407331432460305629920729028237128896); // vk.K[667].Y
        mul_input[2] = input[666];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[667] * input[666]
        mul_input[0] = uint256(8465762721333986547519596195891786652138139598303538100548187712434831043199); // vk.K[668].X
        mul_input[1] = uint256(17247719012784043592831397603334823596546565313177991272891300126516956613395); // vk.K[668].Y
        mul_input[2] = input[667];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[668] * input[667]
        mul_input[0] = uint256(21573945270385758636137998944829055664949869203983256957855623540263851700681); // vk.K[669].X
        mul_input[1] = uint256(6802297196800390076035703501684470706089621250867555307087963172418734809446); // vk.K[669].Y
        mul_input[2] = input[668];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[669] * input[668]
        mul_input[0] = uint256(16551961237960706449744747068250242985737532606748732173106704030615750575796); // vk.K[670].X
        mul_input[1] = uint256(13278371371025875500519567723428405131919676455722419383014128952168971937140); // vk.K[670].Y
        mul_input[2] = input[669];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[670] * input[669]
        mul_input[0] = uint256(8123073197723138176867459281440155549052476218891524316818675920834822561610); // vk.K[671].X
        mul_input[1] = uint256(21888024333446908904015310854768662919953379230866142807066446762082802712110); // vk.K[671].Y
        mul_input[2] = input[670];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[671] * input[670]
        mul_input[0] = uint256(14038381749061047746265689251398492570917836549595267594144173325033972346744); // vk.K[672].X
        mul_input[1] = uint256(1105983205567454540162727447521187063769093421454062032022033863847076838396); // vk.K[672].Y
        mul_input[2] = input[671];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[672] * input[671]
        mul_input[0] = uint256(2505408230996731100575282368521154538151472844772958695748076009338322267001); // vk.K[673].X
        mul_input[1] = uint256(14060917300412792881001200922184657919185486774235658218862380461039333178383); // vk.K[673].Y
        mul_input[2] = input[672];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[673] * input[672]
        mul_input[0] = uint256(12286476322177940023497146613085498371369835498275752806795528104273839008728); // vk.K[674].X
        mul_input[1] = uint256(8176336965516929318320987482023210946221771921314458405766786756994511561847); // vk.K[674].Y
        mul_input[2] = input[673];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[674] * input[673]
        mul_input[0] = uint256(9101018678310029939560632166284697781557225239083899101094362108573798701355); // vk.K[675].X
        mul_input[1] = uint256(15222113706831510298444630920495387172758786016924109396575054492053284632256); // vk.K[675].Y
        mul_input[2] = input[674];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[675] * input[674]
        mul_input[0] = uint256(692358824235628372137258885401492920999145333901403150359796638894313580647); // vk.K[676].X
        mul_input[1] = uint256(16661461891140063502860628623729947137071378149076223170357572392732504188352); // vk.K[676].Y
        mul_input[2] = input[675];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[676] * input[675]
        mul_input[0] = uint256(3584959652818638156227838831491199984351196414547791007590491859804054210985); // vk.K[677].X
        mul_input[1] = uint256(3948630625927237393449830817706421463895783843596622680698494181855731203643); // vk.K[677].Y
        mul_input[2] = input[676];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[677] * input[676]
        mul_input[0] = uint256(18816123577763480721893108388416424984450573579935134416097012677601574698395); // vk.K[678].X
        mul_input[1] = uint256(14291499148330838230616995684251012437220391558261284402203324034847741028658); // vk.K[678].Y
        mul_input[2] = input[677];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[678] * input[677]
        mul_input[0] = uint256(11556305600832895641635264388772067399079581446627127208187616196697892134590); // vk.K[679].X
        mul_input[1] = uint256(6398171922754249140646026744953142244373436014663070027175745649759740765084); // vk.K[679].Y
        mul_input[2] = input[678];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[679] * input[678]
        mul_input[0] = uint256(10302472602698982952656399198867466981013210558588270623423113634749857783322); // vk.K[680].X
        mul_input[1] = uint256(14756397407058507376950658591310787524115953376720852650359893602467348366198); // vk.K[680].Y
        mul_input[2] = input[679];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[680] * input[679]
        mul_input[0] = uint256(16913742289519919250242467829151401069382318332737267331697506032958811050017); // vk.K[681].X
        mul_input[1] = uint256(19725249175203523325200065070478101787475799207390191036666539904389599012959); // vk.K[681].Y
        mul_input[2] = input[680];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[681] * input[680]
        mul_input[0] = uint256(3186696401936590514703463692818141912086756960972820965040698987863031583969); // vk.K[682].X
        mul_input[1] = uint256(9598833908025513384106190448848250603885780377474528746424817153375775976030); // vk.K[682].Y
        mul_input[2] = input[681];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[682] * input[681]
        mul_input[0] = uint256(18650561163864956526976374741632310565485831206704130634372792792762122616505); // vk.K[683].X
        mul_input[1] = uint256(17125770881617689409421561969289245669529002891239090783621895636601220238267); // vk.K[683].Y
        mul_input[2] = input[682];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[683] * input[682]
        mul_input[0] = uint256(7779676076755708231176912458460215506518595460762317893295773910289750898061); // vk.K[684].X
        mul_input[1] = uint256(14879222677725851941476254060795282914588491387455455651812178096994448136817); // vk.K[684].Y
        mul_input[2] = input[683];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[684] * input[683]
        mul_input[0] = uint256(5113995238408903933799856597111640360667913714367692810092759207259169642461); // vk.K[685].X
        mul_input[1] = uint256(161290468857827651360883822407433506390206609753283053275967481598243841653); // vk.K[685].Y
        mul_input[2] = input[684];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[685] * input[684]
        mul_input[0] = uint256(12893154261726788660436991270711931114362184013296994716813061578456991299965); // vk.K[686].X
        mul_input[1] = uint256(401413262799527939321956321042363300371695233583726660614582654237344151422); // vk.K[686].Y
        mul_input[2] = input[685];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[686] * input[685]
        mul_input[0] = uint256(21624816598297956829399355516897703220356782507004574220406014865605313599676); // vk.K[687].X
        mul_input[1] = uint256(2583326967112811286088788491973794514487543393715029823833278943143785578965); // vk.K[687].Y
        mul_input[2] = input[686];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[687] * input[686]
        mul_input[0] = uint256(7819031513549400057776620919694917459779433889829356939816234001442207697977); // vk.K[688].X
        mul_input[1] = uint256(15754499552589054989282569590932224581857689770754218443477147574935882192190); // vk.K[688].Y
        mul_input[2] = input[687];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[688] * input[687]
        mul_input[0] = uint256(21812406314558659772102940954837627925961396760327163806765235146499191721108); // vk.K[689].X
        mul_input[1] = uint256(9196365066605434707302128297943780111578473942769498821711105508678858903736); // vk.K[689].Y
        mul_input[2] = input[688];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[689] * input[688]
        mul_input[0] = uint256(9377011073408832044181958029380621477607109951030328319541281786284972875116); // vk.K[690].X
        mul_input[1] = uint256(8812673680789839656332059632720461312245852139839980261883003073598033281707); // vk.K[690].Y
        mul_input[2] = input[689];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[690] * input[689]
        mul_input[0] = uint256(9207539297485520039360989582654045261575462278989940573122879057978238536296); // vk.K[691].X
        mul_input[1] = uint256(4946120987732975137232107319313775115864211827062250006241971444740678690707); // vk.K[691].Y
        mul_input[2] = input[690];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[691] * input[690]
        mul_input[0] = uint256(4417911065069207752837832075853164399772784283046188739063495264583756057018); // vk.K[692].X
        mul_input[1] = uint256(21154284709148400222228718571754405058839765193839270341977014358076284676648); // vk.K[692].Y
        mul_input[2] = input[691];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[692] * input[691]
        mul_input[0] = uint256(13583581795893890362916006999143445646033073372879911107525686670026549447607); // vk.K[693].X
        mul_input[1] = uint256(18308089965277114223837787550268224354647122016776800887084766650575854686825); // vk.K[693].Y
        mul_input[2] = input[692];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[693] * input[692]
        mul_input[0] = uint256(5595782159457138056402769613982802647824641174811353166520370756857609988299); // vk.K[694].X
        mul_input[1] = uint256(4662307488612685902086944322631658414510847572636110874585222436349712565386); // vk.K[694].Y
        mul_input[2] = input[693];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[694] * input[693]
        mul_input[0] = uint256(475165998597154697351996067763913436816433354457661263171394913872792404123); // vk.K[695].X
        mul_input[1] = uint256(11413458501743456186199490755535978088985913423708683207822699743745876133783); // vk.K[695].Y
        mul_input[2] = input[694];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[695] * input[694]
        mul_input[0] = uint256(14060359879102671309802299368754835913543166537948126920390408438063587059753); // vk.K[696].X
        mul_input[1] = uint256(21719016822553576274256366539336099646073253036794425680258127155880304159084); // vk.K[696].Y
        mul_input[2] = input[695];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[696] * input[695]
        mul_input[0] = uint256(21682440497971456331781968546027753441497833528169598156342674088778039525660); // vk.K[697].X
        mul_input[1] = uint256(15344418419425355611088475307499960062153854421483684630250878984872852867674); // vk.K[697].Y
        mul_input[2] = input[696];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[697] * input[696]
        mul_input[0] = uint256(15669238133047561204089517895517343249406130572090494196398385224941067014579); // vk.K[698].X
        mul_input[1] = uint256(9476368611487775273026988719866358941770961385036959173819130955433726814247); // vk.K[698].Y
        mul_input[2] = input[697];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[698] * input[697]
        mul_input[0] = uint256(1570621317178063146585522675476366743632435963635712371039099381249043959062); // vk.K[699].X
        mul_input[1] = uint256(20382676622143237952188648460159879723075846893508270865071275827252779772975); // vk.K[699].Y
        mul_input[2] = input[698];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[699] * input[698]
        mul_input[0] = uint256(8858537035046743361726111803610565517861694970195151419307396318072435915166); // vk.K[700].X
        mul_input[1] = uint256(19429501211777348333539943352091443509859148352249779775637327411039836679349); // vk.K[700].Y
        mul_input[2] = input[699];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[700] * input[699]
        mul_input[0] = uint256(18208611494882372740957263739341875353639620888980233755628384953686287709739); // vk.K[701].X
        mul_input[1] = uint256(7941712629741661899060218492205219569098489831162386222453840864093366924365); // vk.K[701].Y
        mul_input[2] = input[700];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[701] * input[700]
        mul_input[0] = uint256(11071022042651963879153596364401073598692479414135735689943774002842112674992); // vk.K[702].X
        mul_input[1] = uint256(18610305545157103996336453158068340208020708304464315588706388916745849282680); // vk.K[702].Y
        mul_input[2] = input[701];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[702] * input[701]
        mul_input[0] = uint256(1526250698404909284385348886684083580839449249172874468913900466338370175603); // vk.K[703].X
        mul_input[1] = uint256(20043010082350781302066460201601719009258641815348885750809625280324501641641); // vk.K[703].Y
        mul_input[2] = input[702];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[703] * input[702]
        mul_input[0] = uint256(17000106832615018023637227487075870902071903811634340142121437310217172983918); // vk.K[704].X
        mul_input[1] = uint256(9557627335365764780760241115930197756693963313895143472366321389008091587183); // vk.K[704].Y
        mul_input[2] = input[703];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[704] * input[703]
        mul_input[0] = uint256(10521538665636079890960924862716898295019181969560872587257287143251160405122); // vk.K[705].X
        mul_input[1] = uint256(2481058638668902454850494784694048005785874156346542915733414260821641312857); // vk.K[705].Y
        mul_input[2] = input[704];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[705] * input[704]
        mul_input[0] = uint256(18280383359592146344953105976827149005778671306693642370661318380164267562408); // vk.K[706].X
        mul_input[1] = uint256(2787650020235243202526185011043965740074197561348096374451301545722766979521); // vk.K[706].Y
        mul_input[2] = input[705];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[706] * input[705]
        mul_input[0] = uint256(20676904943243330240437567902731457077676620587871724081886939474829308471913); // vk.K[707].X
        mul_input[1] = uint256(11653683215248127132936023192184025318104083810930699163839257667391116313263); // vk.K[707].Y
        mul_input[2] = input[706];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[707] * input[706]
        mul_input[0] = uint256(8212153318130674194932115606971858073322355781570041937476901412486742681743); // vk.K[708].X
        mul_input[1] = uint256(19928635676437480051672643993818207425448487074240479926502298542352902853316); // vk.K[708].Y
        mul_input[2] = input[707];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[708] * input[707]
        mul_input[0] = uint256(16656055187420282205781649395793085444856758808860279578134175710924131344306); // vk.K[709].X
        mul_input[1] = uint256(17871557172898295875236398431948480190947386712701590591278284583789154905333); // vk.K[709].Y
        mul_input[2] = input[708];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[709] * input[708]
        mul_input[0] = uint256(3955810791026636770470932537828328524866532297255877647487448346946828231518); // vk.K[710].X
        mul_input[1] = uint256(14846193230296279369708903746927857449671667199816542536648566271736123768416); // vk.K[710].Y
        mul_input[2] = input[709];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[710] * input[709]
        mul_input[0] = uint256(16674449482564371132084041605006601611400318984660364176896321640823698569289); // vk.K[711].X
        mul_input[1] = uint256(17155026276750991088372799402420131537460090550077370360527928097307620461723); // vk.K[711].Y
        mul_input[2] = input[710];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[711] * input[710]
        mul_input[0] = uint256(11029883365173817246884468531668601121332701504957940677074909373467427714344); // vk.K[712].X
        mul_input[1] = uint256(14228125165656800482891665071823893587672121818302064109442211655593378223326); // vk.K[712].Y
        mul_input[2] = input[711];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[712] * input[711]
        mul_input[0] = uint256(3052541344687088881654080970824287196079609511453291180860669446276009003380); // vk.K[713].X
        mul_input[1] = uint256(18232107302437039797947452081308494908608820369596060004109570909587631739286); // vk.K[713].Y
        mul_input[2] = input[712];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[713] * input[712]

        return Pairing.pairing(
            Pairing.negate(proof.A),
            proof.B,
            vk.alfa1,
            vk.beta2,
            vk_x,
            vk.gamma2,
            proof.C,
            vk.delta2
        );
    }
}

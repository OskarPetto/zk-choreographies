// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package execution

import (
	"execution-service/domain"
	"execution-service/hash"
	"execution-service/instance"
	"execution-service/model"
)

// Injectors from execution_service.go:

func InitializeExecutionService(modelPort model.ModelPort) ExecutionService {
	instanceService := instance.NewInstanceService()
	hashService := hash.NewHashService()
	executionService := NewExecutionService(modelPort, instanceService, hashService)
	return executionService
}

// execution_service.go:

type ExecutionService struct {
	modelPort       model.ModelPort
	instanceService instance.InstanceService
	hashService     hash.HashService
}

func NewExecutionService(modelPort model.ModelPort, instanceService instance.InstanceService, hashService hash.HashService) ExecutionService {
	return ExecutionService{
		modelPort:       modelPort,
		instanceService: instanceService,
		hashService:     hashService,
	}
}

func (service *ExecutionService) InstantiateModel(cmd InstantiateModelCommand) (domain.Instance, error) {
	model2, err := service.modelPort.FindModelById(cmd.Model)
	if err != nil {
		return domain.Instance{}, err
	}
	modelHash := domain.HashModel(model2)
	instanceResult, err := model2.Instantiate(cmd.PublicKeys)
	if err != nil {
		return domain.Instance{}, err
	}
	service.hashService.SaveModelHash(model2.Id, modelHash)
	service.instanceService.SaveInstance(instanceResult)
	return instanceResult, nil
}

func (service *ExecutionService) ExecuteTransition(cmd ExecuteTransitionCommand) (domain.Instance, error) {
	model2, err := service.modelPort.FindModelById(cmd.Model)
	if err != nil {
		return domain.Instance{}, err
	}
	_, err = service.hashService.FindHashByModelId(model2.Id)
	if err != nil {
		return domain.Instance{}, err
	}
	currentInstance, err := service.instanceService.FindInstanceById(cmd.Instance)
	if err != nil {
		return domain.Instance{}, err
	}
	transition, err := model2.FindTransitionById(cmd.Transition)
	if err != nil {
		return domain.Instance{}, err
	}
	var nextInstance domain.Instance
	if len(cmd.Message) == 0 {
		nextInstance, err = currentInstance.ExecuteTransition(transition)
	} else {
		nextInstance, err = currentInstance.ExecuteTransitionWithMessage(transition, cmd.Message)
	}
	if err != nil {
		return domain.Instance{}, err
	}
	return nextInstance, nil
}

const proofs = JSON.parse(`[{"value":["6644014851311658343363743832276397116312251565561658542650683430639950881178","1801270607727426687847281612540893365203476377731531891515724170111473042843","11384412581303871874486280666499530115328752863311962123389327609130739408459","4582306770468031868269053019468646347628966170963235567018281546540272659844","19516714955646394950576621194036279420485011133171312861296558107552023207365","7534769079965207190924108173636904142038395727359395704354289095012169004412","1996161277981539994657449393114351601071133493609586436162447617301312821672","14240796139962998447374246835983339911419252214018834669664989445017447442674"],"input":["20998472767150222738484089363910669679330618993213561839341150740248264416609","5407303775891604013918353055423545744752231442018783539081514402504214787576"]},{"value":["15404106189104425033812550240093695723004449343065826889816753003756515774743","2976094189176734139432035791329510588860658628100163970801509850166184879270","17818087516432034662456855924880985666839546690721474296025327983121576815082","11531542724620940605647499794913601463990247924038936511655332604609939661017","1260967378139087564214040434953080296246629407135795742696870546071332845471","10239579064100289086358740450440126715201977210629048325561282408163767501310","1116112196356361259109847185594929934180090675725160829836760366500464598352","5217891951693778911389616501614638399610859111825947809849660064448412564561"],"input":["20998472767150222738484089363910669679330618993213561839341150740248264416609","5407303775891604013918353055423545744752231442018783539081514402504214787576","1153494766281961560027625875427417743221086971146046482784478489982446980112"]},{"value":["8723560236133911267004448001131817536829853522724357256872713672995155736862","16711727200167671881419916543548612036702323069995690039981106311799227130943","7374697756324582146282710591732445284071149429029073263043344291309237679681","1622570477920319112006891121361074872019605397319595686950886649561023454830","1845869834389416729070891279269466996428593399452814817306580722389731240729","311387144734690549980091514227631885076171679125449821932239431626979235138","7287963226286998713022177964863925753354505005042108050689918349274035931293","1855571505035168890450800467694359642412051717953623331281095911482165997235"],"input":["20998472767150222738484089363910669679330618993213561839341150740248264416609","4092493600004522914932138458608267200391417189477678093924293864025645381711"]}]`)

const InstantiationVerifier = artifacts.require("InstantiationVerifier");
const TransitionVerifier = artifacts.require("TransitionVerifier");
const TerminationVerifier = artifacts.require("TerminationVerifier");

const InstantiationVerifierMock = artifacts.require("InstantiationVerifierMock");

const InstanceManager = artifacts.require("InstanceManager");


contract('InstanceManager', (accounts) => {
  it('instantiation', async () => {
    const instanceManager = await InstanceManager.new(InstantiationVerifier.address, accounts[0], accounts[0]);

    const firstProof = proofs[0];
    const instantiationProof = firstProof.value;
    const model = firstProof.input[0]
    const instance = firstProof.input[1]

    await instanceManager.instantiate(instantiationProof, model, instance);

    const storedInstance = await instanceManager.instancesPerModel(model);
    assert.equal(storedInstance.toString(), instance.toString(), "instance was stored");
  });

  it('termination', async () => {
    const instantiationVerifierMock = await InstantiationVerifierMock.new();
    const instanceManager = await InstanceManager.new(instantiationVerifierMock.address, accounts[0], TerminationVerifier.address);

    const lastProof = proofs[proofs.length - 1];
    const terminationProof = lastProof.value;
    const model = lastProof.input[0]
    const instance = lastProof.input[1]


    await instanceManager.instantiate(terminationProof, model, instance); // uses mock
    await instanceManager.terminate(terminationProof, model, instance);

    const storedInstance = await instanceManager.instancesPerModel(model);
    assert.equal(storedInstance.toString(), "0", "instance was stored");
  });

  it('transition', async () => {
    const instantiationVerifierMock = await InstantiationVerifierMock.new();
    const instanceManager = await InstanceManager.new(instantiationVerifierMock.address, TransitionVerifier.address, accounts[0]);

    const secondProof = proofs[1];
    const transitionProof = secondProof.value;
    const model = secondProof.input[0]
    const currentInstance = secondProof.input[1]
    const nextInstance = secondProof.input[2]

    await instanceManager.instantiate(transitionProof, model, currentInstance); // uses mock
    await instanceManager.transition(transitionProof, model, currentInstance, nextInstance);

    const storedInstance = await instanceManager.instancesPerModel(model);
    assert.equal(storedInstance.toString(), nextInstance.toString(), "instance was stored");
  });
});

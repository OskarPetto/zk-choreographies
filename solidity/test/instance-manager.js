const proofs = JSON.parse(`[{"value":["5299986766125003809990005204362640326247587170152204654478427463783085880734","10291665602084653144946529584518969874585376694365348487317681742674097892288","1089343813372052996822857305401981322258533647354737682772350280154339124958","20876129082520552557555488152553051416861181246120490857427669592333001800634","18773932679977936863769568210424500445008551391956002739920082060623883106527","17739619228821998077515312397125612480389500502759657200346219939377725181600","492406768779838903969612125837411842824663502084909741677215624119773760462","19152953292430645599041070229939951533328892730167368853580683968172310924225"],"input":["18867350684083441897182632092813649302780313349072802084615329869465226499611","1625274671548286089418799098297827378673241750695086112910314740057369907732"]},{"value":["6111884506877812672817837094577248322955292972993771275561198867132753038883","1459835982017341341967428188611698404971270994849852858280499744111252931160","1521830943771520412850536149610377385123934600825960460714862312104086167639","6443964452263274226501501156520842231364551980890904945583879025652873352568","20259011164841328970359375540336321755757047303257230395558330995387025233691","10249109778841400818131511689579524441244373163679691282008881068807452260842","13765067189889735360355361350684697016704276385623909387682652504317048036542","18369604807273018888117352836898076067001198440280823117529357605717606489131"],"input":["18867350684083441897182632092813649302780313349072802084615329869465226499611","1625274671548286089418799098297827378673241750695086112910314740057369907732","765609545980168116025736417102063661973484670524559565768772952476982241402"]},{"value":["6650625954351091479102473369779293160135406487984426660705307460217284625318","9788539367470254921241815842627818201209735524574726599222705933969239495059","20940581887453768044964129667343116200190603213126358956570578849337336682898","5785660780672200520258141453118463568799461339197831885437797689229271064745","2277557652525840301971574564728617518522894352564429884023168635270153469013","878642456641019479059898065296642792155871575459577985650614832507895289972","20086173032794064971170110611015487570711588324590411193741009887155304142645","12998644457108383568817040889372949020063549573152795899188500563248840718297"],"input":["18867350684083441897182632092813649302780313349072802084615329869465226499611","14557061373503424232910744017524700510652316885170788429763987168182308108745"]}]`)

const InstantiationVerifier = artifacts.require("InstantiationVerifier");
const TransitionVerifier = artifacts.require("TransitionVerifier");
const TerminationVerifier = artifacts.require("TerminationVerifier");

const InstantiationVerifierMock = artifacts.require("InstantiationVerifierMock");

const InstanceManager = artifacts.require("InstanceManager");


contract('InstanceManager', (accounts) => {
  it('instantiation', async () => {
    const instanceManager = await InstanceManager.new(InstantiationVerifier.address, accounts[0], accounts[0]);

    const firstProof = proofs[0];
    const instantiationProof = firstProof.value;
    const model = firstProof.input[0]
    const instance = firstProof.input[1]

    await instanceManager.instantiate(instantiationProof, model, instance);

    const storedModel = await instanceManager.instancesWithTheirModel(instance);
    assert.equal(storedModel.toString(), model.toString(), "instance was stored");
  });

  it('termination', async () => {
    const instantiationVerifierMock = await InstantiationVerifierMock.new();
    const instanceManager = await InstanceManager.new(instantiationVerifierMock.address, accounts[0], TerminationVerifier.address);

    const lastProof = proofs[proofs.length - 1];
    const terminationProof = lastProof.value;
    const model = lastProof.input[0]
    const instance = lastProof.input[1]


    await instanceManager.instantiate(terminationProof, model, instance); // uses mock
    await instanceManager.terminate(terminationProof, model, instance);

    const storedModel = await instanceManager.instancesWithTheirModel(instance);
    assert.equal(storedModel.toString(), "0", "instance was deleted");
  });

  it('transition', async () => {
    const instantiationVerifierMock = await InstantiationVerifierMock.new();
    const instanceManager = await InstanceManager.new(instantiationVerifierMock.address, TransitionVerifier.address, accounts[0]);

    const secondProof = proofs[1];
    const transitionProof = secondProof.value;
    const model = secondProof.input[0]
    const currentInstance = secondProof.input[1]
    const nextInstance = secondProof.input[2]

    await instanceManager.instantiate(transitionProof, model, currentInstance); // uses mock
    await instanceManager.transition(transitionProof, model, currentInstance, nextInstance);

    let storedModel = await instanceManager.instancesWithTheirModel(nextInstance);
    assert.equal(storedModel.toString(), model.toString(), "nextInstance was stored");
    storedModel = await instanceManager.instancesWithTheirModel(currentInstance);
    assert.equal(storedModel.toString(), "0", "currentInstance was deleted");
  });
});

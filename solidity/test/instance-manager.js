const proofs = JSON.parse(`[{"value":["8743099462272215656119813406514912278590428122740284592616864087126498890501","19177245785506376873740366923176198432545062404650616591195395981263803069529","11281489549937307586556140225875519856383448706238149810814513550206523747223","18775607821999711885433871346565637471580029916497154520964506539873271075430","21493910591285159101715500694887833027163182976328949104022333115391678318360","9460964069165369628262253640003084992818371301853429438726966304199508948466","4741421900722482947991560218435086210732771844602293666322264906022765556198","8194963204493393976256045194736337619763668810997425164156706026672697676171"],"input":["19646099213818208799344490194238663381619074359788917742105269295942414580315"]},{"value":["10534179118482997626103537069444261881458203391583559196329746172703159707254","12077998014411825666011063092165404968905311203216326051079363303526536603485","3345763553027563283058763220286706204849557726722691311585218081533796437983","2354026041508986755889055607587804871089404363005784421532861080572098994571","12165722474283308715641788900492756686117543734136785863784084013724062686309","10628341374771488025502820624052954934375976563101294192377446713997886180170","2687243829102973566943217725210458297826486417383103311292869612251162986335","20596959777286685673644967041173335474066872824051911695206321883550061269965"],"input":["19646099213818208799344490194238663381619074359788917742105269295942414580315","1506203480534901804396324343468033596542506161038411503482561303613803630834"]},{"value":["13268597251477322712709468582993732491200093921099011391264554782386813570476","17294473599563961766775481871525542217674551221893774362681803588126415687082","8866407941645959983105731488503440426534746695606573048229844501564443589398","15724353267166432542994499153294916290387920562640890955323319487743363698448","9930664962027497697019708138722061692551335551932776479929238247206221601388","8324257730790233175380525170006008167462220780809313059854746187794806066802","5343367283430837319858360007161110011919958102402331968823680966780225453715","14920876249282556287074424473843068040782759458243307003614962560704780469431"],"input":["14927799845310778846056731630627460012818968158620625968929122333477203967902"]}]`)

const InstantiationVerifier = artifacts.require("InstantiationVerifier");
const TransitionVerifier = artifacts.require("TransitionVerifier");
const TerminationVerifier = artifacts.require("TerminationVerifier");

const InstantiationVerifierMock = artifacts.require("InstantiationVerifierMock");

const InstanceManager = artifacts.require("InstanceManager");


contract('InstanceManager', (accounts) => {
  it('instantiation', async () => {
    const instanceManager = await InstanceManager.new(InstantiationVerifier.address, accounts[0], accounts[0]);

    const firstProof = proofs[0];
    const instantiationProof = firstProof.value;
    const instance = firstProof.input[0]

    await instanceManager.instantiate(instantiationProof, instance);

    const isStored = await instanceManager.instances(instance);
    assert.equal(isStored, true, "instance was stored");
  });

  it('termination', async () => {
    const instantiationVerifierMock = await InstantiationVerifierMock.new();
    const instanceManager = await InstanceManager.new(instantiationVerifierMock.address, accounts[0], TerminationVerifier.address);

    const lastProof = proofs[proofs.length - 1];
    const terminationProof = lastProof.value;
    const instance = lastProof.input[0]


    await instanceManager.instantiate(terminationProof, instance); // uses mock
    await instanceManager.terminate(terminationProof, instance);

    const isStored = await instanceManager.instances(instance);
    assert.equal(isStored, false, "instance was deleted");
  });

  it('transition', async () => {
    const instantiationVerifierMock = await InstantiationVerifierMock.new();
    const instanceManager = await InstanceManager.new(instantiationVerifierMock.address, TransitionVerifier.address, accounts[0]);

    const secondProof = proofs[1];
    const transitionProof = secondProof.value;
    const currentInstance = secondProof.input[0]
    const nextInstance = secondProof.input[1]

    await instanceManager.instantiate(transitionProof, currentInstance); // uses mock
    await instanceManager.transition(transitionProof, currentInstance, nextInstance);

    let isCurrentInstanceStored = await instanceManager.instances(currentInstance);
    assert.equal(isCurrentInstanceStored, false, "currentInstance was deleted");
    let isNextInstanceStored = await instanceManager.instances(nextInstance);
    assert.equal(isNextInstanceStored, true, "nextInstance was stored");
  });
});
